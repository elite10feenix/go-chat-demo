// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/v1/auth.proto

package admin

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AccessToken with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccessToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessToken with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccessTokenMultiError, or
// nil if none found.
func (m *AccessToken) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for AccessToken

	// no validation rules for ExpiresIn

	if len(errors) > 0 {
		return AccessTokenMultiError(errors)
	}

	return nil
}

// AccessTokenMultiError is an error wrapping multiple validation errors
// returned by AccessToken.ValidateAll() if the designated constraints aren't met.
type AccessTokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessTokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessTokenMultiError) AllErrors() []error { return m }

// AccessTokenValidationError is the validation error returned by
// AccessToken.Validate if the designated constraints aren't met.
type AccessTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessTokenValidationError) ErrorName() string { return "AccessTokenValidationError" }

// Error satisfies the builtin error interface
func (e AccessTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessTokenValidationError{}

// Validate checks the field values on AuthLoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthLoginRequestMultiError, or nil if none found.
func (m *AuthLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Captcha

	// no validation rules for CaptchaVoucher

	if len(errors) > 0 {
		return AuthLoginRequestMultiError(errors)
	}

	return nil
}

// AuthLoginRequestMultiError is an error wrapping multiple validation errors
// returned by AuthLoginRequest.ValidateAll() if the designated constraints
// aren't met.
type AuthLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthLoginRequestMultiError) AllErrors() []error { return m }

// AuthLoginRequestValidationError is the validation error returned by
// AuthLoginRequest.Validate if the designated constraints aren't met.
type AuthLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthLoginRequestValidationError) ErrorName() string { return "AuthLoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e AuthLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthLoginRequestValidationError{}

// Validate checks the field values on AuthLoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthLoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthLoginResponseMultiError, or nil if none found.
func (m *AuthLoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthLoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthLoginResponseValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthLoginResponseValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthLoginResponseValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthLoginResponseMultiError(errors)
	}

	return nil
}

// AuthLoginResponseMultiError is an error wrapping multiple validation errors
// returned by AuthLoginResponse.ValidateAll() if the designated constraints
// aren't met.
type AuthLoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthLoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthLoginResponseMultiError) AllErrors() []error { return m }

// AuthLoginResponseValidationError is the validation error returned by
// AuthLoginResponse.Validate if the designated constraints aren't met.
type AuthLoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthLoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthLoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthLoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthLoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthLoginResponseValidationError) ErrorName() string {
	return "AuthLoginResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthLoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthLoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthLoginResponseValidationError{}

// Validate checks the field values on AuthCaptchaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthCaptchaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthCaptchaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthCaptchaRequestMultiError, or nil if none found.
func (m *AuthCaptchaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthCaptchaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthCaptchaRequestMultiError(errors)
	}

	return nil
}

// AuthCaptchaRequestMultiError is an error wrapping multiple validation errors
// returned by AuthCaptchaRequest.ValidateAll() if the designated constraints
// aren't met.
type AuthCaptchaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthCaptchaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthCaptchaRequestMultiError) AllErrors() []error { return m }

// AuthCaptchaRequestValidationError is the validation error returned by
// AuthCaptchaRequest.Validate if the designated constraints aren't met.
type AuthCaptchaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthCaptchaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthCaptchaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthCaptchaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthCaptchaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthCaptchaRequestValidationError) ErrorName() string {
	return "AuthCaptchaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthCaptchaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthCaptchaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthCaptchaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthCaptchaRequestValidationError{}

// Validate checks the field values on AuthCaptchaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthCaptchaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthCaptchaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthCaptchaResponseMultiError, or nil if none found.
func (m *AuthCaptchaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthCaptchaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Voucher

	// no validation rules for Captcha

	if len(errors) > 0 {
		return AuthCaptchaResponseMultiError(errors)
	}

	return nil
}

// AuthCaptchaResponseMultiError is an error wrapping multiple validation
// errors returned by AuthCaptchaResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthCaptchaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthCaptchaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthCaptchaResponseMultiError) AllErrors() []error { return m }

// AuthCaptchaResponseValidationError is the validation error returned by
// AuthCaptchaResponse.Validate if the designated constraints aren't met.
type AuthCaptchaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthCaptchaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthCaptchaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthCaptchaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthCaptchaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthCaptchaResponseValidationError) ErrorName() string {
	return "AuthCaptchaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthCaptchaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthCaptchaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthCaptchaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthCaptchaResponseValidationError{}

// Validate checks the field values on AuthLogoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthLogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthLogoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthLogoutRequestMultiError, or nil if none found.
func (m *AuthLogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthLogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthLogoutRequestMultiError(errors)
	}

	return nil
}

// AuthLogoutRequestMultiError is an error wrapping multiple validation errors
// returned by AuthLogoutRequest.ValidateAll() if the designated constraints
// aren't met.
type AuthLogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthLogoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthLogoutRequestMultiError) AllErrors() []error { return m }

// AuthLogoutRequestValidationError is the validation error returned by
// AuthLogoutRequest.Validate if the designated constraints aren't met.
type AuthLogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthLogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthLogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthLogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthLogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthLogoutRequestValidationError) ErrorName() string {
	return "AuthLogoutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthLogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthLogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthLogoutRequestValidationError{}

// Validate checks the field values on AuthLogoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthLogoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthLogoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthLogoutResponseMultiError, or nil if none found.
func (m *AuthLogoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthLogoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthLogoutResponseMultiError(errors)
	}

	return nil
}

// AuthLogoutResponseMultiError is an error wrapping multiple validation errors
// returned by AuthLogoutResponse.ValidateAll() if the designated constraints
// aren't met.
type AuthLogoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthLogoutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthLogoutResponseMultiError) AllErrors() []error { return m }

// AuthLogoutResponseValidationError is the validation error returned by
// AuthLogoutResponse.Validate if the designated constraints aren't met.
type AuthLogoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthLogoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthLogoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthLogoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthLogoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthLogoutResponseValidationError) ErrorName() string {
	return "AuthLogoutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthLogoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthLogoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthLogoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthLogoutResponseValidationError{}

// Validate checks the field values on AuthRefreshRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthRefreshRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthRefreshRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthRefreshRequestMultiError, or nil if none found.
func (m *AuthRefreshRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthRefreshRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthRefreshRequestMultiError(errors)
	}

	return nil
}

// AuthRefreshRequestMultiError is an error wrapping multiple validation errors
// returned by AuthRefreshRequest.ValidateAll() if the designated constraints
// aren't met.
type AuthRefreshRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthRefreshRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthRefreshRequestMultiError) AllErrors() []error { return m }

// AuthRefreshRequestValidationError is the validation error returned by
// AuthRefreshRequest.Validate if the designated constraints aren't met.
type AuthRefreshRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthRefreshRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthRefreshRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthRefreshRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthRefreshRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthRefreshRequestValidationError) ErrorName() string {
	return "AuthRefreshRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthRefreshRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthRefreshRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthRefreshRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthRefreshRequestValidationError{}

// Validate checks the field values on AuthRefreshResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthRefreshResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthRefreshResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthRefreshResponseMultiError, or nil if none found.
func (m *AuthRefreshResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthRefreshResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for ExpireIn

	if len(errors) > 0 {
		return AuthRefreshResponseMultiError(errors)
	}

	return nil
}

// AuthRefreshResponseMultiError is an error wrapping multiple validation
// errors returned by AuthRefreshResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthRefreshResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthRefreshResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthRefreshResponseMultiError) AllErrors() []error { return m }

// AuthRefreshResponseValidationError is the validation error returned by
// AuthRefreshResponse.Validate if the designated constraints aren't met.
type AuthRefreshResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthRefreshResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthRefreshResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthRefreshResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthRefreshResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthRefreshResponseValidationError) ErrorName() string {
	return "AuthRefreshResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthRefreshResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthRefreshResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthRefreshResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthRefreshResponseValidationError{}
