// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: web/v1/group.proto

package web

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GroupListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GroupListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupListRequestMultiError, or nil if none found.
func (m *GroupListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupListRequestMultiError(errors)
	}

	return nil
}

// GroupListRequestMultiError is an error wrapping multiple validation errors
// returned by GroupListRequest.ValidateAll() if the designated constraints
// aren't met.
type GroupListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupListRequestMultiError) AllErrors() []error { return m }

// GroupListRequestValidationError is the validation error returned by
// GroupListRequest.Validate if the designated constraints aren't met.
type GroupListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupListRequestValidationError) ErrorName() string { return "GroupListRequestValidationError" }

// Error satisfies the builtin error interface
func (e GroupListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupListRequestValidationError{}

// Validate checks the field values on GroupListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GroupListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupListResponseMultiError, or nil if none found.
func (m *GroupListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GroupListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GroupListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GroupListResponseMultiError(errors)
	}

	return nil
}

// GroupListResponseMultiError is an error wrapping multiple validation errors
// returned by GroupListResponse.ValidateAll() if the designated constraints
// aren't met.
type GroupListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupListResponseMultiError) AllErrors() []error { return m }

// GroupListResponseValidationError is the validation error returned by
// GroupListResponse.Validate if the designated constraints aren't met.
type GroupListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupListResponseValidationError) ErrorName() string {
	return "GroupListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupListResponseValidationError{}

// Validate checks the field values on GroupCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupCreateRequestMultiError, or nil if none found.
func (m *GroupCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Ids

	// no validation rules for Avatar

	if len(errors) > 0 {
		return GroupCreateRequestMultiError(errors)
	}

	return nil
}

// GroupCreateRequestMultiError is an error wrapping multiple validation errors
// returned by GroupCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type GroupCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupCreateRequestMultiError) AllErrors() []error { return m }

// GroupCreateRequestValidationError is the validation error returned by
// GroupCreateRequest.Validate if the designated constraints aren't met.
type GroupCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupCreateRequestValidationError) ErrorName() string {
	return "GroupCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupCreateRequestValidationError{}

// Validate checks the field values on GroupCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupCreateResponseMultiError, or nil if none found.
func (m *GroupCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return GroupCreateResponseMultiError(errors)
	}

	return nil
}

// GroupCreateResponseMultiError is an error wrapping multiple validation
// errors returned by GroupCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupCreateResponseMultiError) AllErrors() []error { return m }

// GroupCreateResponseValidationError is the validation error returned by
// GroupCreateResponse.Validate if the designated constraints aren't met.
type GroupCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupCreateResponseValidationError) ErrorName() string {
	return "GroupCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupCreateResponseValidationError{}

// Validate checks the field values on GroupDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupDetailRequestMultiError, or nil if none found.
func (m *GroupDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return GroupDetailRequestMultiError(errors)
	}

	return nil
}

// GroupDetailRequestMultiError is an error wrapping multiple validation errors
// returned by GroupDetailRequest.ValidateAll() if the designated constraints
// aren't met.
type GroupDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupDetailRequestMultiError) AllErrors() []error { return m }

// GroupDetailRequestValidationError is the validation error returned by
// GroupDetailRequest.Validate if the designated constraints aren't met.
type GroupDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupDetailRequestValidationError) ErrorName() string {
	return "GroupDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupDetailRequestValidationError{}

// Validate checks the field values on GroupDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupDetailResponseMultiError, or nil if none found.
func (m *GroupDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for GroupName

	// no validation rules for Profile

	// no validation rules for Avatar

	// no validation rules for CreatedAt

	// no validation rules for IsManager

	// no validation rules for IsDisturb

	// no validation rules for VisitCard

	// no validation rules for IsMute

	// no validation rules for IsOvert

	if len(errors) > 0 {
		return GroupDetailResponseMultiError(errors)
	}

	return nil
}

// GroupDetailResponseMultiError is an error wrapping multiple validation
// errors returned by GroupDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupDetailResponseMultiError) AllErrors() []error { return m }

// GroupDetailResponseValidationError is the validation error returned by
// GroupDetailResponse.Validate if the designated constraints aren't met.
type GroupDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupDetailResponseValidationError) ErrorName() string {
	return "GroupDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupDetailResponseValidationError{}

// Validate checks the field values on GroupMemberListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupMemberListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupMemberListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupMemberListRequestMultiError, or nil if none found.
func (m *GroupMemberListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupMemberListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return GroupMemberListRequestMultiError(errors)
	}

	return nil
}

// GroupMemberListRequestMultiError is an error wrapping multiple validation
// errors returned by GroupMemberListRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupMemberListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupMemberListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupMemberListRequestMultiError) AllErrors() []error { return m }

// GroupMemberListRequestValidationError is the validation error returned by
// GroupMemberListRequest.Validate if the designated constraints aren't met.
type GroupMemberListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupMemberListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupMemberListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupMemberListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupMemberListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupMemberListRequestValidationError) ErrorName() string {
	return "GroupMemberListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupMemberListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupMemberListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupMemberListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupMemberListRequestValidationError{}

// Validate checks the field values on GroupMemberListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupMemberListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupMemberListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupMemberListResponseMultiError, or nil if none found.
func (m *GroupMemberListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupMemberListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GroupMemberListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GroupMemberListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupMemberListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GroupMemberListResponseMultiError(errors)
	}

	return nil
}

// GroupMemberListResponseMultiError is an error wrapping multiple validation
// errors returned by GroupMemberListResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupMemberListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupMemberListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupMemberListResponseMultiError) AllErrors() []error { return m }

// GroupMemberListResponseValidationError is the validation error returned by
// GroupMemberListResponse.Validate if the designated constraints aren't met.
type GroupMemberListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupMemberListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupMemberListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupMemberListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupMemberListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupMemberListResponseValidationError) ErrorName() string {
	return "GroupMemberListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupMemberListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupMemberListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupMemberListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupMemberListResponseValidationError{}

// Validate checks the field values on GroupDismissRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupDismissRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupDismissRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupDismissRequestMultiError, or nil if none found.
func (m *GroupDismissRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupDismissRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return GroupDismissRequestMultiError(errors)
	}

	return nil
}

// GroupDismissRequestMultiError is an error wrapping multiple validation
// errors returned by GroupDismissRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupDismissRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupDismissRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupDismissRequestMultiError) AllErrors() []error { return m }

// GroupDismissRequestValidationError is the validation error returned by
// GroupDismissRequest.Validate if the designated constraints aren't met.
type GroupDismissRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupDismissRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupDismissRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupDismissRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupDismissRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupDismissRequestValidationError) ErrorName() string {
	return "GroupDismissRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupDismissRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupDismissRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupDismissRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupDismissRequestValidationError{}

// Validate checks the field values on GroupDismissResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupDismissResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupDismissResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupDismissResponseMultiError, or nil if none found.
func (m *GroupDismissResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupDismissResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupDismissResponseMultiError(errors)
	}

	return nil
}

// GroupDismissResponseMultiError is an error wrapping multiple validation
// errors returned by GroupDismissResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupDismissResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupDismissResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupDismissResponseMultiError) AllErrors() []error { return m }

// GroupDismissResponseValidationError is the validation error returned by
// GroupDismissResponse.Validate if the designated constraints aren't met.
type GroupDismissResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupDismissResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupDismissResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupDismissResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupDismissResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupDismissResponseValidationError) ErrorName() string {
	return "GroupDismissResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupDismissResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupDismissResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupDismissResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupDismissResponseValidationError{}

// Validate checks the field values on GroupInviteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupInviteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupInviteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupInviteRequestMultiError, or nil if none found.
func (m *GroupInviteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupInviteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for Ids

	if len(errors) > 0 {
		return GroupInviteRequestMultiError(errors)
	}

	return nil
}

// GroupInviteRequestMultiError is an error wrapping multiple validation errors
// returned by GroupInviteRequest.ValidateAll() if the designated constraints
// aren't met.
type GroupInviteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupInviteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupInviteRequestMultiError) AllErrors() []error { return m }

// GroupInviteRequestValidationError is the validation error returned by
// GroupInviteRequest.Validate if the designated constraints aren't met.
type GroupInviteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupInviteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupInviteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupInviteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupInviteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupInviteRequestValidationError) ErrorName() string {
	return "GroupInviteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupInviteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupInviteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupInviteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupInviteRequestValidationError{}

// Validate checks the field values on GroupInviteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupInviteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupInviteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupInviteResponseMultiError, or nil if none found.
func (m *GroupInviteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupInviteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupInviteResponseMultiError(errors)
	}

	return nil
}

// GroupInviteResponseMultiError is an error wrapping multiple validation
// errors returned by GroupInviteResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupInviteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupInviteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupInviteResponseMultiError) AllErrors() []error { return m }

// GroupInviteResponseValidationError is the validation error returned by
// GroupInviteResponse.Validate if the designated constraints aren't met.
type GroupInviteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupInviteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupInviteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupInviteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupInviteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupInviteResponseValidationError) ErrorName() string {
	return "GroupInviteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupInviteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupInviteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupInviteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupInviteResponseValidationError{}

// Validate checks the field values on GetInviteFriendsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInviteFriendsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInviteFriendsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInviteFriendsRequestMultiError, or nil if none found.
func (m *GetInviteFriendsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInviteFriendsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return GetInviteFriendsRequestMultiError(errors)
	}

	return nil
}

// GetInviteFriendsRequestMultiError is an error wrapping multiple validation
// errors returned by GetInviteFriendsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetInviteFriendsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInviteFriendsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInviteFriendsRequestMultiError) AllErrors() []error { return m }

// GetInviteFriendsRequestValidationError is the validation error returned by
// GetInviteFriendsRequest.Validate if the designated constraints aren't met.
type GetInviteFriendsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInviteFriendsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInviteFriendsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInviteFriendsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInviteFriendsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInviteFriendsRequestValidationError) ErrorName() string {
	return "GetInviteFriendsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInviteFriendsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInviteFriendsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInviteFriendsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInviteFriendsRequestValidationError{}

// Validate checks the field values on GetInviteFriendsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInviteFriendsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInviteFriendsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInviteFriendsResponseMultiError, or nil if none found.
func (m *GetInviteFriendsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInviteFriendsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetInviteFriendsResponseMultiError(errors)
	}

	return nil
}

// GetInviteFriendsResponseMultiError is an error wrapping multiple validation
// errors returned by GetInviteFriendsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetInviteFriendsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInviteFriendsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInviteFriendsResponseMultiError) AllErrors() []error { return m }

// GetInviteFriendsResponseValidationError is the validation error returned by
// GetInviteFriendsResponse.Validate if the designated constraints aren't met.
type GetInviteFriendsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInviteFriendsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInviteFriendsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInviteFriendsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInviteFriendsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInviteFriendsResponseValidationError) ErrorName() string {
	return "GetInviteFriendsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetInviteFriendsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInviteFriendsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInviteFriendsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInviteFriendsResponseValidationError{}

// Validate checks the field values on GroupSecedeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupSecedeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupSecedeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupSecedeRequestMultiError, or nil if none found.
func (m *GroupSecedeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupSecedeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return GroupSecedeRequestMultiError(errors)
	}

	return nil
}

// GroupSecedeRequestMultiError is an error wrapping multiple validation errors
// returned by GroupSecedeRequest.ValidateAll() if the designated constraints
// aren't met.
type GroupSecedeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupSecedeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupSecedeRequestMultiError) AllErrors() []error { return m }

// GroupSecedeRequestValidationError is the validation error returned by
// GroupSecedeRequest.Validate if the designated constraints aren't met.
type GroupSecedeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupSecedeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupSecedeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupSecedeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupSecedeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupSecedeRequestValidationError) ErrorName() string {
	return "GroupSecedeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupSecedeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupSecedeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupSecedeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupSecedeRequestValidationError{}

// Validate checks the field values on GroupSecedeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupSecedeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupSecedeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupSecedeResponseMultiError, or nil if none found.
func (m *GroupSecedeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupSecedeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupSecedeResponseMultiError(errors)
	}

	return nil
}

// GroupSecedeResponseMultiError is an error wrapping multiple validation
// errors returned by GroupSecedeResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupSecedeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupSecedeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupSecedeResponseMultiError) AllErrors() []error { return m }

// GroupSecedeResponseValidationError is the validation error returned by
// GroupSecedeResponse.Validate if the designated constraints aren't met.
type GroupSecedeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupSecedeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupSecedeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupSecedeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupSecedeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupSecedeResponseValidationError) ErrorName() string {
	return "GroupSecedeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupSecedeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupSecedeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupSecedeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupSecedeResponseValidationError{}

// Validate checks the field values on GroupSettingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupSettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupSettingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupSettingRequestMultiError, or nil if none found.
func (m *GroupSettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupSettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for GroupName

	// no validation rules for Avatar

	// no validation rules for Profile

	if len(errors) > 0 {
		return GroupSettingRequestMultiError(errors)
	}

	return nil
}

// GroupSettingRequestMultiError is an error wrapping multiple validation
// errors returned by GroupSettingRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupSettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupSettingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupSettingRequestMultiError) AllErrors() []error { return m }

// GroupSettingRequestValidationError is the validation error returned by
// GroupSettingRequest.Validate if the designated constraints aren't met.
type GroupSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupSettingRequestValidationError) ErrorName() string {
	return "GroupSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupSettingRequestValidationError{}

// Validate checks the field values on GroupSettingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupSettingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupSettingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupSettingResponseMultiError, or nil if none found.
func (m *GroupSettingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupSettingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupSettingResponseMultiError(errors)
	}

	return nil
}

// GroupSettingResponseMultiError is an error wrapping multiple validation
// errors returned by GroupSettingResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupSettingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupSettingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupSettingResponseMultiError) AllErrors() []error { return m }

// GroupSettingResponseValidationError is the validation error returned by
// GroupSettingResponse.Validate if the designated constraints aren't met.
type GroupSettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupSettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupSettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupSettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupSettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupSettingResponseValidationError) ErrorName() string {
	return "GroupSettingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupSettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupSettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupSettingResponseValidationError{}

// Validate checks the field values on GroupRemarkUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupRemarkUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupRemarkUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupRemarkUpdateRequestMultiError, or nil if none found.
func (m *GroupRemarkUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupRemarkUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for VisitCard

	if len(errors) > 0 {
		return GroupRemarkUpdateRequestMultiError(errors)
	}

	return nil
}

// GroupRemarkUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by GroupRemarkUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupRemarkUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupRemarkUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupRemarkUpdateRequestMultiError) AllErrors() []error { return m }

// GroupRemarkUpdateRequestValidationError is the validation error returned by
// GroupRemarkUpdateRequest.Validate if the designated constraints aren't met.
type GroupRemarkUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupRemarkUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupRemarkUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupRemarkUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupRemarkUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupRemarkUpdateRequestValidationError) ErrorName() string {
	return "GroupRemarkUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupRemarkUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupRemarkUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupRemarkUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupRemarkUpdateRequestValidationError{}

// Validate checks the field values on GroupRemarkUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupRemarkUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupRemarkUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupRemarkUpdateResponseMultiError, or nil if none found.
func (m *GroupRemarkUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupRemarkUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupRemarkUpdateResponseMultiError(errors)
	}

	return nil
}

// GroupRemarkUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by GroupRemarkUpdateResponse.ValidateAll() if the
// designated constraints aren't met.
type GroupRemarkUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupRemarkUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupRemarkUpdateResponseMultiError) AllErrors() []error { return m }

// GroupRemarkUpdateResponseValidationError is the validation error returned by
// GroupRemarkUpdateResponse.Validate if the designated constraints aren't met.
type GroupRemarkUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupRemarkUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupRemarkUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupRemarkUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupRemarkUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupRemarkUpdateResponseValidationError) ErrorName() string {
	return "GroupRemarkUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupRemarkUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupRemarkUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupRemarkUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupRemarkUpdateResponseValidationError{}

// Validate checks the field values on GroupRemoveMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupRemoveMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupRemoveMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupRemoveMemberRequestMultiError, or nil if none found.
func (m *GroupRemoveMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupRemoveMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for MembersIds

	if len(errors) > 0 {
		return GroupRemoveMemberRequestMultiError(errors)
	}

	return nil
}

// GroupRemoveMemberRequestMultiError is an error wrapping multiple validation
// errors returned by GroupRemoveMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupRemoveMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupRemoveMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupRemoveMemberRequestMultiError) AllErrors() []error { return m }

// GroupRemoveMemberRequestValidationError is the validation error returned by
// GroupRemoveMemberRequest.Validate if the designated constraints aren't met.
type GroupRemoveMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupRemoveMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupRemoveMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupRemoveMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupRemoveMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupRemoveMemberRequestValidationError) ErrorName() string {
	return "GroupRemoveMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupRemoveMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupRemoveMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupRemoveMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupRemoveMemberRequestValidationError{}

// Validate checks the field values on GroupRemoveMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupRemoveMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupRemoveMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupRemoveMemberResponseMultiError, or nil if none found.
func (m *GroupRemoveMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupRemoveMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupRemoveMemberResponseMultiError(errors)
	}

	return nil
}

// GroupRemoveMemberResponseMultiError is an error wrapping multiple validation
// errors returned by GroupRemoveMemberResponse.ValidateAll() if the
// designated constraints aren't met.
type GroupRemoveMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupRemoveMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupRemoveMemberResponseMultiError) AllErrors() []error { return m }

// GroupRemoveMemberResponseValidationError is the validation error returned by
// GroupRemoveMemberResponse.Validate if the designated constraints aren't met.
type GroupRemoveMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupRemoveMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupRemoveMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupRemoveMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupRemoveMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupRemoveMemberResponseValidationError) ErrorName() string {
	return "GroupRemoveMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupRemoveMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupRemoveMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupRemoveMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupRemoveMemberResponseValidationError{}

// Validate checks the field values on GroupOvertListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupOvertListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupOvertListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupOvertListRequestMultiError, or nil if none found.
func (m *GroupOvertListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupOvertListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Name

	if len(errors) > 0 {
		return GroupOvertListRequestMultiError(errors)
	}

	return nil
}

// GroupOvertListRequestMultiError is an error wrapping multiple validation
// errors returned by GroupOvertListRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupOvertListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupOvertListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupOvertListRequestMultiError) AllErrors() []error { return m }

// GroupOvertListRequestValidationError is the validation error returned by
// GroupOvertListRequest.Validate if the designated constraints aren't met.
type GroupOvertListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupOvertListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupOvertListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupOvertListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupOvertListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupOvertListRequestValidationError) ErrorName() string {
	return "GroupOvertListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupOvertListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupOvertListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupOvertListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupOvertListRequestValidationError{}

// Validate checks the field values on GroupOvertListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupOvertListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupOvertListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupOvertListResponseMultiError, or nil if none found.
func (m *GroupOvertListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupOvertListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GroupOvertListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GroupOvertListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupOvertListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Next

	if len(errors) > 0 {
		return GroupOvertListResponseMultiError(errors)
	}

	return nil
}

// GroupOvertListResponseMultiError is an error wrapping multiple validation
// errors returned by GroupOvertListResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupOvertListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupOvertListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupOvertListResponseMultiError) AllErrors() []error { return m }

// GroupOvertListResponseValidationError is the validation error returned by
// GroupOvertListResponse.Validate if the designated constraints aren't met.
type GroupOvertListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupOvertListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupOvertListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupOvertListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupOvertListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupOvertListResponseValidationError) ErrorName() string {
	return "GroupOvertListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupOvertListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupOvertListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupOvertListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupOvertListResponseValidationError{}

// Validate checks the field values on GroupHandoverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupHandoverRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupHandoverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupHandoverRequestMultiError, or nil if none found.
func (m *GroupHandoverRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupHandoverRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GroupHandoverRequestMultiError(errors)
	}

	return nil
}

// GroupHandoverRequestMultiError is an error wrapping multiple validation
// errors returned by GroupHandoverRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupHandoverRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupHandoverRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupHandoverRequestMultiError) AllErrors() []error { return m }

// GroupHandoverRequestValidationError is the validation error returned by
// GroupHandoverRequest.Validate if the designated constraints aren't met.
type GroupHandoverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupHandoverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupHandoverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupHandoverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupHandoverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupHandoverRequestValidationError) ErrorName() string {
	return "GroupHandoverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupHandoverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupHandoverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupHandoverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupHandoverRequestValidationError{}

// Validate checks the field values on GroupHandoverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupHandoverResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupHandoverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupHandoverResponseMultiError, or nil if none found.
func (m *GroupHandoverResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupHandoverResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupHandoverResponseMultiError(errors)
	}

	return nil
}

// GroupHandoverResponseMultiError is an error wrapping multiple validation
// errors returned by GroupHandoverResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupHandoverResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupHandoverResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupHandoverResponseMultiError) AllErrors() []error { return m }

// GroupHandoverResponseValidationError is the validation error returned by
// GroupHandoverResponse.Validate if the designated constraints aren't met.
type GroupHandoverResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupHandoverResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupHandoverResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupHandoverResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupHandoverResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupHandoverResponseValidationError) ErrorName() string {
	return "GroupHandoverResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupHandoverResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupHandoverResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupHandoverResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupHandoverResponseValidationError{}

// Validate checks the field values on GroupAssignAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupAssignAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupAssignAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupAssignAdminRequestMultiError, or nil if none found.
func (m *GroupAssignAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupAssignAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for UserId

	// no validation rules for Mode

	if len(errors) > 0 {
		return GroupAssignAdminRequestMultiError(errors)
	}

	return nil
}

// GroupAssignAdminRequestMultiError is an error wrapping multiple validation
// errors returned by GroupAssignAdminRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupAssignAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupAssignAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupAssignAdminRequestMultiError) AllErrors() []error { return m }

// GroupAssignAdminRequestValidationError is the validation error returned by
// GroupAssignAdminRequest.Validate if the designated constraints aren't met.
type GroupAssignAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupAssignAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupAssignAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupAssignAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupAssignAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupAssignAdminRequestValidationError) ErrorName() string {
	return "GroupAssignAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupAssignAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupAssignAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupAssignAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupAssignAdminRequestValidationError{}

// Validate checks the field values on GroupAssignAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupAssignAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupAssignAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupAssignAdminResponseMultiError, or nil if none found.
func (m *GroupAssignAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupAssignAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupAssignAdminResponseMultiError(errors)
	}

	return nil
}

// GroupAssignAdminResponseMultiError is an error wrapping multiple validation
// errors returned by GroupAssignAdminResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupAssignAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupAssignAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupAssignAdminResponseMultiError) AllErrors() []error { return m }

// GroupAssignAdminResponseValidationError is the validation error returned by
// GroupAssignAdminResponse.Validate if the designated constraints aren't met.
type GroupAssignAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupAssignAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupAssignAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupAssignAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupAssignAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupAssignAdminResponseValidationError) ErrorName() string {
	return "GroupAssignAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupAssignAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupAssignAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupAssignAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupAssignAdminResponseValidationError{}

// Validate checks the field values on GroupNoSpeakRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupNoSpeakRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupNoSpeakRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupNoSpeakRequestMultiError, or nil if none found.
func (m *GroupNoSpeakRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupNoSpeakRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for UserId

	// no validation rules for Mode

	if len(errors) > 0 {
		return GroupNoSpeakRequestMultiError(errors)
	}

	return nil
}

// GroupNoSpeakRequestMultiError is an error wrapping multiple validation
// errors returned by GroupNoSpeakRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupNoSpeakRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupNoSpeakRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupNoSpeakRequestMultiError) AllErrors() []error { return m }

// GroupNoSpeakRequestValidationError is the validation error returned by
// GroupNoSpeakRequest.Validate if the designated constraints aren't met.
type GroupNoSpeakRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupNoSpeakRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupNoSpeakRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupNoSpeakRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupNoSpeakRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupNoSpeakRequestValidationError) ErrorName() string {
	return "GroupNoSpeakRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupNoSpeakRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupNoSpeakRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupNoSpeakRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupNoSpeakRequestValidationError{}

// Validate checks the field values on GroupNoSpeakResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupNoSpeakResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupNoSpeakResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupNoSpeakResponseMultiError, or nil if none found.
func (m *GroupNoSpeakResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupNoSpeakResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupNoSpeakResponseMultiError(errors)
	}

	return nil
}

// GroupNoSpeakResponseMultiError is an error wrapping multiple validation
// errors returned by GroupNoSpeakResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupNoSpeakResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupNoSpeakResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupNoSpeakResponseMultiError) AllErrors() []error { return m }

// GroupNoSpeakResponseValidationError is the validation error returned by
// GroupNoSpeakResponse.Validate if the designated constraints aren't met.
type GroupNoSpeakResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupNoSpeakResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupNoSpeakResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupNoSpeakResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupNoSpeakResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupNoSpeakResponseValidationError) ErrorName() string {
	return "GroupNoSpeakResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupNoSpeakResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupNoSpeakResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupNoSpeakResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupNoSpeakResponseValidationError{}

// Validate checks the field values on GroupMuteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GroupMuteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupMuteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupMuteRequestMultiError, or nil if none found.
func (m *GroupMuteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupMuteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for Mode

	if len(errors) > 0 {
		return GroupMuteRequestMultiError(errors)
	}

	return nil
}

// GroupMuteRequestMultiError is an error wrapping multiple validation errors
// returned by GroupMuteRequest.ValidateAll() if the designated constraints
// aren't met.
type GroupMuteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupMuteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupMuteRequestMultiError) AllErrors() []error { return m }

// GroupMuteRequestValidationError is the validation error returned by
// GroupMuteRequest.Validate if the designated constraints aren't met.
type GroupMuteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupMuteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupMuteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupMuteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupMuteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupMuteRequestValidationError) ErrorName() string { return "GroupMuteRequestValidationError" }

// Error satisfies the builtin error interface
func (e GroupMuteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupMuteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupMuteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupMuteRequestValidationError{}

// Validate checks the field values on GroupMuteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GroupMuteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupMuteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupMuteResponseMultiError, or nil if none found.
func (m *GroupMuteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupMuteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupMuteResponseMultiError(errors)
	}

	return nil
}

// GroupMuteResponseMultiError is an error wrapping multiple validation errors
// returned by GroupMuteResponse.ValidateAll() if the designated constraints
// aren't met.
type GroupMuteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupMuteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupMuteResponseMultiError) AllErrors() []error { return m }

// GroupMuteResponseValidationError is the validation error returned by
// GroupMuteResponse.Validate if the designated constraints aren't met.
type GroupMuteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupMuteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupMuteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupMuteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupMuteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupMuteResponseValidationError) ErrorName() string {
	return "GroupMuteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupMuteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupMuteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupMuteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupMuteResponseValidationError{}

// Validate checks the field values on GroupOvertRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GroupOvertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupOvertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupOvertRequestMultiError, or nil if none found.
func (m *GroupOvertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupOvertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for Mode

	if len(errors) > 0 {
		return GroupOvertRequestMultiError(errors)
	}

	return nil
}

// GroupOvertRequestMultiError is an error wrapping multiple validation errors
// returned by GroupOvertRequest.ValidateAll() if the designated constraints
// aren't met.
type GroupOvertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupOvertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupOvertRequestMultiError) AllErrors() []error { return m }

// GroupOvertRequestValidationError is the validation error returned by
// GroupOvertRequest.Validate if the designated constraints aren't met.
type GroupOvertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupOvertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupOvertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupOvertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupOvertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupOvertRequestValidationError) ErrorName() string {
	return "GroupOvertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupOvertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupOvertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupOvertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupOvertRequestValidationError{}

// Validate checks the field values on GroupOvertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupOvertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupOvertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupOvertResponseMultiError, or nil if none found.
func (m *GroupOvertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupOvertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupOvertResponseMultiError(errors)
	}

	return nil
}

// GroupOvertResponseMultiError is an error wrapping multiple validation errors
// returned by GroupOvertResponse.ValidateAll() if the designated constraints
// aren't met.
type GroupOvertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupOvertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupOvertResponseMultiError) AllErrors() []error { return m }

// GroupOvertResponseValidationError is the validation error returned by
// GroupOvertResponse.Validate if the designated constraints aren't met.
type GroupOvertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupOvertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupOvertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupOvertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupOvertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupOvertResponseValidationError) ErrorName() string {
	return "GroupOvertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupOvertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupOvertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupOvertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupOvertResponseValidationError{}

// Validate checks the field values on GroupListResponse_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupListResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupListResponse_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupListResponse_ItemMultiError, or nil if none found.
func (m *GroupListResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupListResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for GroupName

	// no validation rules for Avatar

	// no validation rules for Profile

	// no validation rules for Leader

	// no validation rules for IsDisturb

	// no validation rules for CreatorId

	if len(errors) > 0 {
		return GroupListResponse_ItemMultiError(errors)
	}

	return nil
}

// GroupListResponse_ItemMultiError is an error wrapping multiple validation
// errors returned by GroupListResponse_Item.ValidateAll() if the designated
// constraints aren't met.
type GroupListResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupListResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupListResponse_ItemMultiError) AllErrors() []error { return m }

// GroupListResponse_ItemValidationError is the validation error returned by
// GroupListResponse_Item.Validate if the designated constraints aren't met.
type GroupListResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupListResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupListResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupListResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupListResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupListResponse_ItemValidationError) ErrorName() string {
	return "GroupListResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GroupListResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupListResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupListResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupListResponse_ItemValidationError{}

// Validate checks the field values on GroupMemberListResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupMemberListResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupMemberListResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupMemberListResponse_ItemMultiError, or nil if none found.
func (m *GroupMemberListResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupMemberListResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Nickname

	// no validation rules for Avatar

	// no validation rules for Gender

	// no validation rules for Leader

	// no validation rules for IsMute

	// no validation rules for Remark

	if len(errors) > 0 {
		return GroupMemberListResponse_ItemMultiError(errors)
	}

	return nil
}

// GroupMemberListResponse_ItemMultiError is an error wrapping multiple
// validation errors returned by GroupMemberListResponse_Item.ValidateAll() if
// the designated constraints aren't met.
type GroupMemberListResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupMemberListResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupMemberListResponse_ItemMultiError) AllErrors() []error { return m }

// GroupMemberListResponse_ItemValidationError is the validation error returned
// by GroupMemberListResponse_Item.Validate if the designated constraints
// aren't met.
type GroupMemberListResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupMemberListResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupMemberListResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupMemberListResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupMemberListResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupMemberListResponse_ItemValidationError) ErrorName() string {
	return "GroupMemberListResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GroupMemberListResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupMemberListResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupMemberListResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupMemberListResponse_ItemValidationError{}

// Validate checks the field values on GroupOvertListResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupOvertListResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupOvertListResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupOvertListResponse_ItemMultiError, or nil if none found.
func (m *GroupOvertListResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupOvertListResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Avatar

	// no validation rules for Profile

	// no validation rules for Count

	// no validation rules for MaxNum

	// no validation rules for IsMember

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return GroupOvertListResponse_ItemMultiError(errors)
	}

	return nil
}

// GroupOvertListResponse_ItemMultiError is an error wrapping multiple
// validation errors returned by GroupOvertListResponse_Item.ValidateAll() if
// the designated constraints aren't met.
type GroupOvertListResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupOvertListResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupOvertListResponse_ItemMultiError) AllErrors() []error { return m }

// GroupOvertListResponse_ItemValidationError is the validation error returned
// by GroupOvertListResponse_Item.Validate if the designated constraints
// aren't met.
type GroupOvertListResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupOvertListResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupOvertListResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupOvertListResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupOvertListResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupOvertListResponse_ItemValidationError) ErrorName() string {
	return "GroupOvertListResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GroupOvertListResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupOvertListResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupOvertListResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupOvertListResponse_ItemValidationError{}
