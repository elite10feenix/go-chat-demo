// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: web/v1/contact_group.proto

package web

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ContactGroupCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactGroupCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactGroupCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactGroupCreateRequestMultiError, or nil if none found.
func (m *ContactGroupCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactGroupCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Sort

	if len(errors) > 0 {
		return ContactGroupCreateRequestMultiError(errors)
	}

	return nil
}

// ContactGroupCreateRequestMultiError is an error wrapping multiple validation
// errors returned by ContactGroupCreateRequest.ValidateAll() if the
// designated constraints aren't met.
type ContactGroupCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactGroupCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactGroupCreateRequestMultiError) AllErrors() []error { return m }

// ContactGroupCreateRequestValidationError is the validation error returned by
// ContactGroupCreateRequest.Validate if the designated constraints aren't met.
type ContactGroupCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactGroupCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactGroupCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactGroupCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactGroupCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactGroupCreateRequestValidationError) ErrorName() string {
	return "ContactGroupCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactGroupCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactGroupCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactGroupCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactGroupCreateRequestValidationError{}

// Validate checks the field values on ContactGroupCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactGroupCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactGroupCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactGroupCreateResponseMultiError, or nil if none found.
func (m *ContactGroupCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactGroupCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ContactGroupCreateResponseMultiError(errors)
	}

	return nil
}

// ContactGroupCreateResponseMultiError is an error wrapping multiple
// validation errors returned by ContactGroupCreateResponse.ValidateAll() if
// the designated constraints aren't met.
type ContactGroupCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactGroupCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactGroupCreateResponseMultiError) AllErrors() []error { return m }

// ContactGroupCreateResponseValidationError is the validation error returned
// by ContactGroupCreateResponse.Validate if the designated constraints aren't met.
type ContactGroupCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactGroupCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactGroupCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactGroupCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactGroupCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactGroupCreateResponseValidationError) ErrorName() string {
	return "ContactGroupCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactGroupCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactGroupCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactGroupCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactGroupCreateResponseValidationError{}

// Validate checks the field values on ContactGroupUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactGroupUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactGroupUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactGroupUpdateRequestMultiError, or nil if none found.
func (m *ContactGroupUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactGroupUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Sort

	if len(errors) > 0 {
		return ContactGroupUpdateRequestMultiError(errors)
	}

	return nil
}

// ContactGroupUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by ContactGroupUpdateRequest.ValidateAll() if the
// designated constraints aren't met.
type ContactGroupUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactGroupUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactGroupUpdateRequestMultiError) AllErrors() []error { return m }

// ContactGroupUpdateRequestValidationError is the validation error returned by
// ContactGroupUpdateRequest.Validate if the designated constraints aren't met.
type ContactGroupUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactGroupUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactGroupUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactGroupUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactGroupUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactGroupUpdateRequestValidationError) ErrorName() string {
	return "ContactGroupUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactGroupUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactGroupUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactGroupUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactGroupUpdateRequestValidationError{}

// Validate checks the field values on ContactGroupUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactGroupUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactGroupUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactGroupUpdateResponseMultiError, or nil if none found.
func (m *ContactGroupUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactGroupUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ContactGroupUpdateResponseMultiError(errors)
	}

	return nil
}

// ContactGroupUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by ContactGroupUpdateResponse.ValidateAll() if
// the designated constraints aren't met.
type ContactGroupUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactGroupUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactGroupUpdateResponseMultiError) AllErrors() []error { return m }

// ContactGroupUpdateResponseValidationError is the validation error returned
// by ContactGroupUpdateResponse.Validate if the designated constraints aren't met.
type ContactGroupUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactGroupUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactGroupUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactGroupUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactGroupUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactGroupUpdateResponseValidationError) ErrorName() string {
	return "ContactGroupUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactGroupUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactGroupUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactGroupUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactGroupUpdateResponseValidationError{}

// Validate checks the field values on ContactGroupDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactGroupDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactGroupDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactGroupDeleteRequestMultiError, or nil if none found.
func (m *ContactGroupDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactGroupDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ContactGroupDeleteRequestMultiError(errors)
	}

	return nil
}

// ContactGroupDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by ContactGroupDeleteRequest.ValidateAll() if the
// designated constraints aren't met.
type ContactGroupDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactGroupDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactGroupDeleteRequestMultiError) AllErrors() []error { return m }

// ContactGroupDeleteRequestValidationError is the validation error returned by
// ContactGroupDeleteRequest.Validate if the designated constraints aren't met.
type ContactGroupDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactGroupDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactGroupDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactGroupDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactGroupDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactGroupDeleteRequestValidationError) ErrorName() string {
	return "ContactGroupDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactGroupDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactGroupDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactGroupDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactGroupDeleteRequestValidationError{}

// Validate checks the field values on ContactGroupDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactGroupDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactGroupDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactGroupDeleteResponseMultiError, or nil if none found.
func (m *ContactGroupDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactGroupDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ContactGroupDeleteResponseMultiError(errors)
	}

	return nil
}

// ContactGroupDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by ContactGroupDeleteResponse.ValidateAll() if
// the designated constraints aren't met.
type ContactGroupDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactGroupDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactGroupDeleteResponseMultiError) AllErrors() []error { return m }

// ContactGroupDeleteResponseValidationError is the validation error returned
// by ContactGroupDeleteResponse.Validate if the designated constraints aren't met.
type ContactGroupDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactGroupDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactGroupDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactGroupDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactGroupDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactGroupDeleteResponseValidationError) ErrorName() string {
	return "ContactGroupDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactGroupDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactGroupDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactGroupDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactGroupDeleteResponseValidationError{}

// Validate checks the field values on ContactGroupSortRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactGroupSortRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactGroupSortRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactGroupSortRequestMultiError, or nil if none found.
func (m *ContactGroupSortRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactGroupSortRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContactGroupSortRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContactGroupSortRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContactGroupSortRequestValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ContactGroupSortRequestMultiError(errors)
	}

	return nil
}

// ContactGroupSortRequestMultiError is an error wrapping multiple validation
// errors returned by ContactGroupSortRequest.ValidateAll() if the designated
// constraints aren't met.
type ContactGroupSortRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactGroupSortRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactGroupSortRequestMultiError) AllErrors() []error { return m }

// ContactGroupSortRequestValidationError is the validation error returned by
// ContactGroupSortRequest.Validate if the designated constraints aren't met.
type ContactGroupSortRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactGroupSortRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactGroupSortRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactGroupSortRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactGroupSortRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactGroupSortRequestValidationError) ErrorName() string {
	return "ContactGroupSortRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactGroupSortRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactGroupSortRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactGroupSortRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactGroupSortRequestValidationError{}

// Validate checks the field values on ContactGroupSortResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactGroupSortResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactGroupSortResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactGroupSortResponseMultiError, or nil if none found.
func (m *ContactGroupSortResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactGroupSortResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ContactGroupSortResponseMultiError(errors)
	}

	return nil
}

// ContactGroupSortResponseMultiError is an error wrapping multiple validation
// errors returned by ContactGroupSortResponse.ValidateAll() if the designated
// constraints aren't met.
type ContactGroupSortResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactGroupSortResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactGroupSortResponseMultiError) AllErrors() []error { return m }

// ContactGroupSortResponseValidationError is the validation error returned by
// ContactGroupSortResponse.Validate if the designated constraints aren't met.
type ContactGroupSortResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactGroupSortResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactGroupSortResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactGroupSortResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactGroupSortResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactGroupSortResponseValidationError) ErrorName() string {
	return "ContactGroupSortResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactGroupSortResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactGroupSortResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactGroupSortResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactGroupSortResponseValidationError{}

// Validate checks the field values on ContactGroupListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactGroupListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactGroupListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactGroupListRequestMultiError, or nil if none found.
func (m *ContactGroupListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactGroupListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ContactGroupListRequestMultiError(errors)
	}

	return nil
}

// ContactGroupListRequestMultiError is an error wrapping multiple validation
// errors returned by ContactGroupListRequest.ValidateAll() if the designated
// constraints aren't met.
type ContactGroupListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactGroupListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactGroupListRequestMultiError) AllErrors() []error { return m }

// ContactGroupListRequestValidationError is the validation error returned by
// ContactGroupListRequest.Validate if the designated constraints aren't met.
type ContactGroupListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactGroupListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactGroupListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactGroupListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactGroupListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactGroupListRequestValidationError) ErrorName() string {
	return "ContactGroupListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactGroupListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactGroupListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactGroupListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactGroupListRequestValidationError{}

// Validate checks the field values on ContactGroupListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactGroupListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactGroupListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactGroupListResponseMultiError, or nil if none found.
func (m *ContactGroupListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactGroupListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContactGroupListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContactGroupListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContactGroupListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ContactGroupListResponseMultiError(errors)
	}

	return nil
}

// ContactGroupListResponseMultiError is an error wrapping multiple validation
// errors returned by ContactGroupListResponse.ValidateAll() if the designated
// constraints aren't met.
type ContactGroupListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactGroupListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactGroupListResponseMultiError) AllErrors() []error { return m }

// ContactGroupListResponseValidationError is the validation error returned by
// ContactGroupListResponse.Validate if the designated constraints aren't met.
type ContactGroupListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactGroupListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactGroupListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactGroupListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactGroupListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactGroupListResponseValidationError) ErrorName() string {
	return "ContactGroupListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactGroupListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactGroupListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactGroupListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactGroupListResponseValidationError{}

// Validate checks the field values on ContactGroupSaveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactGroupSaveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactGroupSaveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactGroupSaveRequestMultiError, or nil if none found.
func (m *ContactGroupSaveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactGroupSaveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContactGroupSaveRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContactGroupSaveRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContactGroupSaveRequestValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ContactGroupSaveRequestMultiError(errors)
	}

	return nil
}

// ContactGroupSaveRequestMultiError is an error wrapping multiple validation
// errors returned by ContactGroupSaveRequest.ValidateAll() if the designated
// constraints aren't met.
type ContactGroupSaveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactGroupSaveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactGroupSaveRequestMultiError) AllErrors() []error { return m }

// ContactGroupSaveRequestValidationError is the validation error returned by
// ContactGroupSaveRequest.Validate if the designated constraints aren't met.
type ContactGroupSaveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactGroupSaveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactGroupSaveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactGroupSaveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactGroupSaveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactGroupSaveRequestValidationError) ErrorName() string {
	return "ContactGroupSaveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactGroupSaveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactGroupSaveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactGroupSaveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactGroupSaveRequestValidationError{}

// Validate checks the field values on ContactGroupSaveResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactGroupSaveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactGroupSaveResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactGroupSaveResponseMultiError, or nil if none found.
func (m *ContactGroupSaveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactGroupSaveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ContactGroupSaveResponseMultiError(errors)
	}

	return nil
}

// ContactGroupSaveResponseMultiError is an error wrapping multiple validation
// errors returned by ContactGroupSaveResponse.ValidateAll() if the designated
// constraints aren't met.
type ContactGroupSaveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactGroupSaveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactGroupSaveResponseMultiError) AllErrors() []error { return m }

// ContactGroupSaveResponseValidationError is the validation error returned by
// ContactGroupSaveResponse.Validate if the designated constraints aren't met.
type ContactGroupSaveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactGroupSaveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactGroupSaveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactGroupSaveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactGroupSaveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactGroupSaveResponseValidationError) ErrorName() string {
	return "ContactGroupSaveResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactGroupSaveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactGroupSaveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactGroupSaveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactGroupSaveResponseValidationError{}

// Validate checks the field values on ContactGroupSortRequest_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactGroupSortRequest_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactGroupSortRequest_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactGroupSortRequest_ItemMultiError, or nil if none found.
func (m *ContactGroupSortRequest_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactGroupSortRequest_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Sort

	if len(errors) > 0 {
		return ContactGroupSortRequest_ItemMultiError(errors)
	}

	return nil
}

// ContactGroupSortRequest_ItemMultiError is an error wrapping multiple
// validation errors returned by ContactGroupSortRequest_Item.ValidateAll() if
// the designated constraints aren't met.
type ContactGroupSortRequest_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactGroupSortRequest_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactGroupSortRequest_ItemMultiError) AllErrors() []error { return m }

// ContactGroupSortRequest_ItemValidationError is the validation error returned
// by ContactGroupSortRequest_Item.Validate if the designated constraints
// aren't met.
type ContactGroupSortRequest_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactGroupSortRequest_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactGroupSortRequest_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactGroupSortRequest_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactGroupSortRequest_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactGroupSortRequest_ItemValidationError) ErrorName() string {
	return "ContactGroupSortRequest_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e ContactGroupSortRequest_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactGroupSortRequest_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactGroupSortRequest_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactGroupSortRequest_ItemValidationError{}

// Validate checks the field values on ContactGroupListResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactGroupListResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactGroupListResponse_Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ContactGroupListResponse_ItemMultiError, or nil if none found.
func (m *ContactGroupListResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactGroupListResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Count

	// no validation rules for Sort

	if len(errors) > 0 {
		return ContactGroupListResponse_ItemMultiError(errors)
	}

	return nil
}

// ContactGroupListResponse_ItemMultiError is an error wrapping multiple
// validation errors returned by ContactGroupListResponse_Item.ValidateAll()
// if the designated constraints aren't met.
type ContactGroupListResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactGroupListResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactGroupListResponse_ItemMultiError) AllErrors() []error { return m }

// ContactGroupListResponse_ItemValidationError is the validation error
// returned by ContactGroupListResponse_Item.Validate if the designated
// constraints aren't met.
type ContactGroupListResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactGroupListResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactGroupListResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactGroupListResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactGroupListResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactGroupListResponse_ItemValidationError) ErrorName() string {
	return "ContactGroupListResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e ContactGroupListResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactGroupListResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactGroupListResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactGroupListResponse_ItemValidationError{}

// Validate checks the field values on ContactGroupSaveRequest_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactGroupSaveRequest_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactGroupSaveRequest_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactGroupSaveRequest_ItemMultiError, or nil if none found.
func (m *ContactGroupSaveRequest_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactGroupSaveRequest_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Sort

	// no validation rules for Name

	if len(errors) > 0 {
		return ContactGroupSaveRequest_ItemMultiError(errors)
	}

	return nil
}

// ContactGroupSaveRequest_ItemMultiError is an error wrapping multiple
// validation errors returned by ContactGroupSaveRequest_Item.ValidateAll() if
// the designated constraints aren't met.
type ContactGroupSaveRequest_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactGroupSaveRequest_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactGroupSaveRequest_ItemMultiError) AllErrors() []error { return m }

// ContactGroupSaveRequest_ItemValidationError is the validation error returned
// by ContactGroupSaveRequest_Item.Validate if the designated constraints
// aren't met.
type ContactGroupSaveRequest_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactGroupSaveRequest_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactGroupSaveRequest_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactGroupSaveRequest_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactGroupSaveRequest_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactGroupSaveRequest_ItemValidationError) ErrorName() string {
	return "ContactGroupSaveRequest_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e ContactGroupSaveRequest_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactGroupSaveRequest_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactGroupSaveRequest_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactGroupSaveRequest_ItemValidationError{}
