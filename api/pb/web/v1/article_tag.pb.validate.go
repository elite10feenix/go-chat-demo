// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: web/v1/article_tag.proto

package web

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ArticleTagListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleTagListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleTagListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleTagListRequestMultiError, or nil if none found.
func (m *ArticleTagListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleTagListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ArticleTagListRequestMultiError(errors)
	}

	return nil
}

// ArticleTagListRequestMultiError is an error wrapping multiple validation
// errors returned by ArticleTagListRequest.ValidateAll() if the designated
// constraints aren't met.
type ArticleTagListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleTagListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleTagListRequestMultiError) AllErrors() []error { return m }

// ArticleTagListRequestValidationError is the validation error returned by
// ArticleTagListRequest.Validate if the designated constraints aren't met.
type ArticleTagListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleTagListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleTagListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleTagListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleTagListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleTagListRequestValidationError) ErrorName() string {
	return "ArticleTagListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleTagListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleTagListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleTagListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleTagListRequestValidationError{}

// Validate checks the field values on ArticleTagListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleTagListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleTagListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleTagListResponseMultiError, or nil if none found.
func (m *ArticleTagListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleTagListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ArticleTagListResponseValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ArticleTagListResponseValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArticleTagListResponseValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ArticleTagListResponseMultiError(errors)
	}

	return nil
}

// ArticleTagListResponseMultiError is an error wrapping multiple validation
// errors returned by ArticleTagListResponse.ValidateAll() if the designated
// constraints aren't met.
type ArticleTagListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleTagListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleTagListResponseMultiError) AllErrors() []error { return m }

// ArticleTagListResponseValidationError is the validation error returned by
// ArticleTagListResponse.Validate if the designated constraints aren't met.
type ArticleTagListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleTagListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleTagListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleTagListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleTagListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleTagListResponseValidationError) ErrorName() string {
	return "ArticleTagListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleTagListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleTagListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleTagListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleTagListResponseValidationError{}

// Validate checks the field values on ArticleTagEditRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleTagEditRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleTagEditRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleTagEditRequestMultiError, or nil if none found.
func (m *ArticleTagEditRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleTagEditRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TagId

	// no validation rules for TagName

	if len(errors) > 0 {
		return ArticleTagEditRequestMultiError(errors)
	}

	return nil
}

// ArticleTagEditRequestMultiError is an error wrapping multiple validation
// errors returned by ArticleTagEditRequest.ValidateAll() if the designated
// constraints aren't met.
type ArticleTagEditRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleTagEditRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleTagEditRequestMultiError) AllErrors() []error { return m }

// ArticleTagEditRequestValidationError is the validation error returned by
// ArticleTagEditRequest.Validate if the designated constraints aren't met.
type ArticleTagEditRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleTagEditRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleTagEditRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleTagEditRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleTagEditRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleTagEditRequestValidationError) ErrorName() string {
	return "ArticleTagEditRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleTagEditRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleTagEditRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleTagEditRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleTagEditRequestValidationError{}

// Validate checks the field values on ArticleTagEditResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleTagEditResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleTagEditResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleTagEditResponseMultiError, or nil if none found.
func (m *ArticleTagEditResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleTagEditResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ArticleTagEditResponseMultiError(errors)
	}

	return nil
}

// ArticleTagEditResponseMultiError is an error wrapping multiple validation
// errors returned by ArticleTagEditResponse.ValidateAll() if the designated
// constraints aren't met.
type ArticleTagEditResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleTagEditResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleTagEditResponseMultiError) AllErrors() []error { return m }

// ArticleTagEditResponseValidationError is the validation error returned by
// ArticleTagEditResponse.Validate if the designated constraints aren't met.
type ArticleTagEditResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleTagEditResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleTagEditResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleTagEditResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleTagEditResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleTagEditResponseValidationError) ErrorName() string {
	return "ArticleTagEditResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleTagEditResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleTagEditResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleTagEditResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleTagEditResponseValidationError{}

// Validate checks the field values on ArticleTagDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleTagDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleTagDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleTagDeleteRequestMultiError, or nil if none found.
func (m *ArticleTagDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleTagDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TagId

	if len(errors) > 0 {
		return ArticleTagDeleteRequestMultiError(errors)
	}

	return nil
}

// ArticleTagDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by ArticleTagDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type ArticleTagDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleTagDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleTagDeleteRequestMultiError) AllErrors() []error { return m }

// ArticleTagDeleteRequestValidationError is the validation error returned by
// ArticleTagDeleteRequest.Validate if the designated constraints aren't met.
type ArticleTagDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleTagDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleTagDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleTagDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleTagDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleTagDeleteRequestValidationError) ErrorName() string {
	return "ArticleTagDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleTagDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleTagDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleTagDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleTagDeleteRequestValidationError{}

// Validate checks the field values on ArticleTagDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleTagDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleTagDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleTagDeleteResponseMultiError, or nil if none found.
func (m *ArticleTagDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleTagDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ArticleTagDeleteResponseMultiError(errors)
	}

	return nil
}

// ArticleTagDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by ArticleTagDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type ArticleTagDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleTagDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleTagDeleteResponseMultiError) AllErrors() []error { return m }

// ArticleTagDeleteResponseValidationError is the validation error returned by
// ArticleTagDeleteResponse.Validate if the designated constraints aren't met.
type ArticleTagDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleTagDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleTagDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleTagDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleTagDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleTagDeleteResponseValidationError) ErrorName() string {
	return "ArticleTagDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleTagDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleTagDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleTagDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleTagDeleteResponseValidationError{}

// Validate checks the field values on ArticleTagListResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleTagListResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleTagListResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleTagListResponse_ItemMultiError, or nil if none found.
func (m *ArticleTagListResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleTagListResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TagName

	// no validation rules for Count

	if len(errors) > 0 {
		return ArticleTagListResponse_ItemMultiError(errors)
	}

	return nil
}

// ArticleTagListResponse_ItemMultiError is an error wrapping multiple
// validation errors returned by ArticleTagListResponse_Item.ValidateAll() if
// the designated constraints aren't met.
type ArticleTagListResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleTagListResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleTagListResponse_ItemMultiError) AllErrors() []error { return m }

// ArticleTagListResponse_ItemValidationError is the validation error returned
// by ArticleTagListResponse_Item.Validate if the designated constraints
// aren't met.
type ArticleTagListResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleTagListResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleTagListResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleTagListResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleTagListResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleTagListResponse_ItemValidationError) ErrorName() string {
	return "ArticleTagListResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleTagListResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleTagListResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleTagListResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleTagListResponse_ItemValidationError{}
