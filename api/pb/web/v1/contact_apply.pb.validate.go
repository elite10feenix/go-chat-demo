// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: web/v1/contact_apply.proto

package web

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ContactApplyCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactApplyCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactApplyCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactApplyCreateRequestMultiError, or nil if none found.
func (m *ContactApplyCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactApplyCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FriendId

	// no validation rules for Remark

	if len(errors) > 0 {
		return ContactApplyCreateRequestMultiError(errors)
	}

	return nil
}

// ContactApplyCreateRequestMultiError is an error wrapping multiple validation
// errors returned by ContactApplyCreateRequest.ValidateAll() if the
// designated constraints aren't met.
type ContactApplyCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactApplyCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactApplyCreateRequestMultiError) AllErrors() []error { return m }

// ContactApplyCreateRequestValidationError is the validation error returned by
// ContactApplyCreateRequest.Validate if the designated constraints aren't met.
type ContactApplyCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactApplyCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactApplyCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactApplyCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactApplyCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactApplyCreateRequestValidationError) ErrorName() string {
	return "ContactApplyCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactApplyCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactApplyCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactApplyCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactApplyCreateRequestValidationError{}

// Validate checks the field values on ContactApplyCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactApplyCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactApplyCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactApplyCreateResponseMultiError, or nil if none found.
func (m *ContactApplyCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactApplyCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ContactApplyCreateResponseMultiError(errors)
	}

	return nil
}

// ContactApplyCreateResponseMultiError is an error wrapping multiple
// validation errors returned by ContactApplyCreateResponse.ValidateAll() if
// the designated constraints aren't met.
type ContactApplyCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactApplyCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactApplyCreateResponseMultiError) AllErrors() []error { return m }

// ContactApplyCreateResponseValidationError is the validation error returned
// by ContactApplyCreateResponse.Validate if the designated constraints aren't met.
type ContactApplyCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactApplyCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactApplyCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactApplyCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactApplyCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactApplyCreateResponseValidationError) ErrorName() string {
	return "ContactApplyCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactApplyCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactApplyCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactApplyCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactApplyCreateResponseValidationError{}

// Validate checks the field values on ContactApplyAcceptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactApplyAcceptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactApplyAcceptRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactApplyAcceptRequestMultiError, or nil if none found.
func (m *ContactApplyAcceptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactApplyAcceptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplyId

	// no validation rules for Remark

	if len(errors) > 0 {
		return ContactApplyAcceptRequestMultiError(errors)
	}

	return nil
}

// ContactApplyAcceptRequestMultiError is an error wrapping multiple validation
// errors returned by ContactApplyAcceptRequest.ValidateAll() if the
// designated constraints aren't met.
type ContactApplyAcceptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactApplyAcceptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactApplyAcceptRequestMultiError) AllErrors() []error { return m }

// ContactApplyAcceptRequestValidationError is the validation error returned by
// ContactApplyAcceptRequest.Validate if the designated constraints aren't met.
type ContactApplyAcceptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactApplyAcceptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactApplyAcceptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactApplyAcceptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactApplyAcceptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactApplyAcceptRequestValidationError) ErrorName() string {
	return "ContactApplyAcceptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactApplyAcceptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactApplyAcceptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactApplyAcceptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactApplyAcceptRequestValidationError{}

// Validate checks the field values on ContactApplyAcceptResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactApplyAcceptResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactApplyAcceptResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactApplyAcceptResponseMultiError, or nil if none found.
func (m *ContactApplyAcceptResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactApplyAcceptResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ContactApplyAcceptResponseMultiError(errors)
	}

	return nil
}

// ContactApplyAcceptResponseMultiError is an error wrapping multiple
// validation errors returned by ContactApplyAcceptResponse.ValidateAll() if
// the designated constraints aren't met.
type ContactApplyAcceptResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactApplyAcceptResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactApplyAcceptResponseMultiError) AllErrors() []error { return m }

// ContactApplyAcceptResponseValidationError is the validation error returned
// by ContactApplyAcceptResponse.Validate if the designated constraints aren't met.
type ContactApplyAcceptResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactApplyAcceptResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactApplyAcceptResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactApplyAcceptResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactApplyAcceptResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactApplyAcceptResponseValidationError) ErrorName() string {
	return "ContactApplyAcceptResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactApplyAcceptResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactApplyAcceptResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactApplyAcceptResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactApplyAcceptResponseValidationError{}

// Validate checks the field values on ContactApplyDeclineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactApplyDeclineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactApplyDeclineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactApplyDeclineRequestMultiError, or nil if none found.
func (m *ContactApplyDeclineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactApplyDeclineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplyId

	// no validation rules for Remark

	if len(errors) > 0 {
		return ContactApplyDeclineRequestMultiError(errors)
	}

	return nil
}

// ContactApplyDeclineRequestMultiError is an error wrapping multiple
// validation errors returned by ContactApplyDeclineRequest.ValidateAll() if
// the designated constraints aren't met.
type ContactApplyDeclineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactApplyDeclineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactApplyDeclineRequestMultiError) AllErrors() []error { return m }

// ContactApplyDeclineRequestValidationError is the validation error returned
// by ContactApplyDeclineRequest.Validate if the designated constraints aren't met.
type ContactApplyDeclineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactApplyDeclineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactApplyDeclineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactApplyDeclineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactApplyDeclineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactApplyDeclineRequestValidationError) ErrorName() string {
	return "ContactApplyDeclineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactApplyDeclineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactApplyDeclineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactApplyDeclineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactApplyDeclineRequestValidationError{}

// Validate checks the field values on ContactApplyDeclineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactApplyDeclineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactApplyDeclineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactApplyDeclineResponseMultiError, or nil if none found.
func (m *ContactApplyDeclineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactApplyDeclineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ContactApplyDeclineResponseMultiError(errors)
	}

	return nil
}

// ContactApplyDeclineResponseMultiError is an error wrapping multiple
// validation errors returned by ContactApplyDeclineResponse.ValidateAll() if
// the designated constraints aren't met.
type ContactApplyDeclineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactApplyDeclineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactApplyDeclineResponseMultiError) AllErrors() []error { return m }

// ContactApplyDeclineResponseValidationError is the validation error returned
// by ContactApplyDeclineResponse.Validate if the designated constraints
// aren't met.
type ContactApplyDeclineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactApplyDeclineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactApplyDeclineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactApplyDeclineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactApplyDeclineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactApplyDeclineResponseValidationError) ErrorName() string {
	return "ContactApplyDeclineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactApplyDeclineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactApplyDeclineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactApplyDeclineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactApplyDeclineResponseValidationError{}

// Validate checks the field values on ContactApplyListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactApplyListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactApplyListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactApplyListRequestMultiError, or nil if none found.
func (m *ContactApplyListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactApplyListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ContactApplyListRequestMultiError(errors)
	}

	return nil
}

// ContactApplyListRequestMultiError is an error wrapping multiple validation
// errors returned by ContactApplyListRequest.ValidateAll() if the designated
// constraints aren't met.
type ContactApplyListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactApplyListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactApplyListRequestMultiError) AllErrors() []error { return m }

// ContactApplyListRequestValidationError is the validation error returned by
// ContactApplyListRequest.Validate if the designated constraints aren't met.
type ContactApplyListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactApplyListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactApplyListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactApplyListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactApplyListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactApplyListRequestValidationError) ErrorName() string {
	return "ContactApplyListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactApplyListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactApplyListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactApplyListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactApplyListRequestValidationError{}

// Validate checks the field values on ContactApplyListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactApplyListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactApplyListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactApplyListResponseMultiError, or nil if none found.
func (m *ContactApplyListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactApplyListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContactApplyListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContactApplyListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContactApplyListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ContactApplyListResponseMultiError(errors)
	}

	return nil
}

// ContactApplyListResponseMultiError is an error wrapping multiple validation
// errors returned by ContactApplyListResponse.ValidateAll() if the designated
// constraints aren't met.
type ContactApplyListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactApplyListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactApplyListResponseMultiError) AllErrors() []error { return m }

// ContactApplyListResponseValidationError is the validation error returned by
// ContactApplyListResponse.Validate if the designated constraints aren't met.
type ContactApplyListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactApplyListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactApplyListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactApplyListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactApplyListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactApplyListResponseValidationError) ErrorName() string {
	return "ContactApplyListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactApplyListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactApplyListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactApplyListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactApplyListResponseValidationError{}

// Validate checks the field values on ContactApplyListResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactApplyListResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactApplyListResponse_Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ContactApplyListResponse_ItemMultiError, or nil if none found.
func (m *ContactApplyListResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactApplyListResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for FriendId

	// no validation rules for Remark

	// no validation rules for Nickname

	// no validation rules for Avatar

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return ContactApplyListResponse_ItemMultiError(errors)
	}

	return nil
}

// ContactApplyListResponse_ItemMultiError is an error wrapping multiple
// validation errors returned by ContactApplyListResponse_Item.ValidateAll()
// if the designated constraints aren't met.
type ContactApplyListResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactApplyListResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactApplyListResponse_ItemMultiError) AllErrors() []error { return m }

// ContactApplyListResponse_ItemValidationError is the validation error
// returned by ContactApplyListResponse_Item.Validate if the designated
// constraints aren't met.
type ContactApplyListResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactApplyListResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactApplyListResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactApplyListResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactApplyListResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactApplyListResponse_ItemValidationError) ErrorName() string {
	return "ContactApplyListResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e ContactApplyListResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactApplyListResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactApplyListResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactApplyListResponse_ItemValidationError{}
