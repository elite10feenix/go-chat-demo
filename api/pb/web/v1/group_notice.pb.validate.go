// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: web/v1/group_notice.proto

package web

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GroupNoticeDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupNoticeDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupNoticeDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupNoticeDeleteRequestMultiError, or nil if none found.
func (m *GroupNoticeDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupNoticeDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for NoticeId

	if len(errors) > 0 {
		return GroupNoticeDeleteRequestMultiError(errors)
	}

	return nil
}

// GroupNoticeDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by GroupNoticeDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupNoticeDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupNoticeDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupNoticeDeleteRequestMultiError) AllErrors() []error { return m }

// GroupNoticeDeleteRequestValidationError is the validation error returned by
// GroupNoticeDeleteRequest.Validate if the designated constraints aren't met.
type GroupNoticeDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupNoticeDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupNoticeDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupNoticeDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupNoticeDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupNoticeDeleteRequestValidationError) ErrorName() string {
	return "GroupNoticeDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupNoticeDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupNoticeDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupNoticeDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupNoticeDeleteRequestValidationError{}

// Validate checks the field values on GroupNoticeDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupNoticeDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupNoticeDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupNoticeDeleteResponseMultiError, or nil if none found.
func (m *GroupNoticeDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupNoticeDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupNoticeDeleteResponseMultiError(errors)
	}

	return nil
}

// GroupNoticeDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by GroupNoticeDeleteResponse.ValidateAll() if the
// designated constraints aren't met.
type GroupNoticeDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupNoticeDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupNoticeDeleteResponseMultiError) AllErrors() []error { return m }

// GroupNoticeDeleteResponseValidationError is the validation error returned by
// GroupNoticeDeleteResponse.Validate if the designated constraints aren't met.
type GroupNoticeDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupNoticeDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupNoticeDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupNoticeDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupNoticeDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupNoticeDeleteResponseValidationError) ErrorName() string {
	return "GroupNoticeDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupNoticeDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupNoticeDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupNoticeDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupNoticeDeleteResponseValidationError{}

// Validate checks the field values on GroupNoticeEditRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupNoticeEditRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupNoticeEditRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupNoticeEditRequestMultiError, or nil if none found.
func (m *GroupNoticeEditRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupNoticeEditRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for NoticeId

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for IsTop

	// no validation rules for IsConfirm

	if len(errors) > 0 {
		return GroupNoticeEditRequestMultiError(errors)
	}

	return nil
}

// GroupNoticeEditRequestMultiError is an error wrapping multiple validation
// errors returned by GroupNoticeEditRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupNoticeEditRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupNoticeEditRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupNoticeEditRequestMultiError) AllErrors() []error { return m }

// GroupNoticeEditRequestValidationError is the validation error returned by
// GroupNoticeEditRequest.Validate if the designated constraints aren't met.
type GroupNoticeEditRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupNoticeEditRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupNoticeEditRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupNoticeEditRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupNoticeEditRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupNoticeEditRequestValidationError) ErrorName() string {
	return "GroupNoticeEditRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupNoticeEditRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupNoticeEditRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupNoticeEditRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupNoticeEditRequestValidationError{}

// Validate checks the field values on GroupNoticeEditResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupNoticeEditResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupNoticeEditResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupNoticeEditResponseMultiError, or nil if none found.
func (m *GroupNoticeEditResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupNoticeEditResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupNoticeEditResponseMultiError(errors)
	}

	return nil
}

// GroupNoticeEditResponseMultiError is an error wrapping multiple validation
// errors returned by GroupNoticeEditResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupNoticeEditResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupNoticeEditResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupNoticeEditResponseMultiError) AllErrors() []error { return m }

// GroupNoticeEditResponseValidationError is the validation error returned by
// GroupNoticeEditResponse.Validate if the designated constraints aren't met.
type GroupNoticeEditResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupNoticeEditResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupNoticeEditResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupNoticeEditResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupNoticeEditResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupNoticeEditResponseValidationError) ErrorName() string {
	return "GroupNoticeEditResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupNoticeEditResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupNoticeEditResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupNoticeEditResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupNoticeEditResponseValidationError{}

// Validate checks the field values on GroupNoticeListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupNoticeListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupNoticeListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupNoticeListRequestMultiError, or nil if none found.
func (m *GroupNoticeListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupNoticeListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return GroupNoticeListRequestMultiError(errors)
	}

	return nil
}

// GroupNoticeListRequestMultiError is an error wrapping multiple validation
// errors returned by GroupNoticeListRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupNoticeListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupNoticeListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupNoticeListRequestMultiError) AllErrors() []error { return m }

// GroupNoticeListRequestValidationError is the validation error returned by
// GroupNoticeListRequest.Validate if the designated constraints aren't met.
type GroupNoticeListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupNoticeListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupNoticeListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupNoticeListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupNoticeListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupNoticeListRequestValidationError) ErrorName() string {
	return "GroupNoticeListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupNoticeListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupNoticeListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupNoticeListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupNoticeListRequestValidationError{}

// Validate checks the field values on GroupNoticeListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupNoticeListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupNoticeListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupNoticeListResponseMultiError, or nil if none found.
func (m *GroupNoticeListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupNoticeListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GroupNoticeListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GroupNoticeListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupNoticeListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GroupNoticeListResponseMultiError(errors)
	}

	return nil
}

// GroupNoticeListResponseMultiError is an error wrapping multiple validation
// errors returned by GroupNoticeListResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupNoticeListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupNoticeListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupNoticeListResponseMultiError) AllErrors() []error { return m }

// GroupNoticeListResponseValidationError is the validation error returned by
// GroupNoticeListResponse.Validate if the designated constraints aren't met.
type GroupNoticeListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupNoticeListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupNoticeListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupNoticeListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupNoticeListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupNoticeListResponseValidationError) ErrorName() string {
	return "GroupNoticeListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupNoticeListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupNoticeListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupNoticeListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupNoticeListResponseValidationError{}

// Validate checks the field values on GroupNoticeListResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupNoticeListResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupNoticeListResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupNoticeListResponse_ItemMultiError, or nil if none found.
func (m *GroupNoticeListResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupNoticeListResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for IsTop

	// no validation rules for IsConfirm

	// no validation rules for ConfirmUsers

	// no validation rules for Avatar

	// no validation rules for CreatorId

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GroupNoticeListResponse_ItemMultiError(errors)
	}

	return nil
}

// GroupNoticeListResponse_ItemMultiError is an error wrapping multiple
// validation errors returned by GroupNoticeListResponse_Item.ValidateAll() if
// the designated constraints aren't met.
type GroupNoticeListResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupNoticeListResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupNoticeListResponse_ItemMultiError) AllErrors() []error { return m }

// GroupNoticeListResponse_ItemValidationError is the validation error returned
// by GroupNoticeListResponse_Item.Validate if the designated constraints
// aren't met.
type GroupNoticeListResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupNoticeListResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupNoticeListResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupNoticeListResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupNoticeListResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupNoticeListResponse_ItemValidationError) ErrorName() string {
	return "GroupNoticeListResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GroupNoticeListResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupNoticeListResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupNoticeListResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupNoticeListResponse_ItemValidationError{}
