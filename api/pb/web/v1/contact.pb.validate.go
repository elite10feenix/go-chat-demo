// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: web/v1/contact.proto

package web

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ContactListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactListRequestMultiError, or nil if none found.
func (m *ContactListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ContactListRequestMultiError(errors)
	}

	return nil
}

// ContactListRequestMultiError is an error wrapping multiple validation errors
// returned by ContactListRequest.ValidateAll() if the designated constraints
// aren't met.
type ContactListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactListRequestMultiError) AllErrors() []error { return m }

// ContactListRequestValidationError is the validation error returned by
// ContactListRequest.Validate if the designated constraints aren't met.
type ContactListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactListRequestValidationError) ErrorName() string {
	return "ContactListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactListRequestValidationError{}

// Validate checks the field values on ContactListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactListResponseMultiError, or nil if none found.
func (m *ContactListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContactListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContactListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContactListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ContactListResponseMultiError(errors)
	}

	return nil
}

// ContactListResponseMultiError is an error wrapping multiple validation
// errors returned by ContactListResponse.ValidateAll() if the designated
// constraints aren't met.
type ContactListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactListResponseMultiError) AllErrors() []error { return m }

// ContactListResponseValidationError is the validation error returned by
// ContactListResponse.Validate if the designated constraints aren't met.
type ContactListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactListResponseValidationError) ErrorName() string {
	return "ContactListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactListResponseValidationError{}

// Validate checks the field values on ContactDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactDeleteRequestMultiError, or nil if none found.
func (m *ContactDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FriendId

	if len(errors) > 0 {
		return ContactDeleteRequestMultiError(errors)
	}

	return nil
}

// ContactDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by ContactDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type ContactDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactDeleteRequestMultiError) AllErrors() []error { return m }

// ContactDeleteRequestValidationError is the validation error returned by
// ContactDeleteRequest.Validate if the designated constraints aren't met.
type ContactDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactDeleteRequestValidationError) ErrorName() string {
	return "ContactDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactDeleteRequestValidationError{}

// Validate checks the field values on ContactDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactDeleteResponseMultiError, or nil if none found.
func (m *ContactDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ContactDeleteResponseMultiError(errors)
	}

	return nil
}

// ContactDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by ContactDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type ContactDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactDeleteResponseMultiError) AllErrors() []error { return m }

// ContactDeleteResponseValidationError is the validation error returned by
// ContactDeleteResponse.Validate if the designated constraints aren't met.
type ContactDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactDeleteResponseValidationError) ErrorName() string {
	return "ContactDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactDeleteResponseValidationError{}

// Validate checks the field values on ContactEditRemarkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactEditRemarkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactEditRemarkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactEditRemarkRequestMultiError, or nil if none found.
func (m *ContactEditRemarkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactEditRemarkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FriendId

	// no validation rules for Remark

	if len(errors) > 0 {
		return ContactEditRemarkRequestMultiError(errors)
	}

	return nil
}

// ContactEditRemarkRequestMultiError is an error wrapping multiple validation
// errors returned by ContactEditRemarkRequest.ValidateAll() if the designated
// constraints aren't met.
type ContactEditRemarkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactEditRemarkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactEditRemarkRequestMultiError) AllErrors() []error { return m }

// ContactEditRemarkRequestValidationError is the validation error returned by
// ContactEditRemarkRequest.Validate if the designated constraints aren't met.
type ContactEditRemarkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactEditRemarkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactEditRemarkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactEditRemarkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactEditRemarkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactEditRemarkRequestValidationError) ErrorName() string {
	return "ContactEditRemarkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactEditRemarkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactEditRemarkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactEditRemarkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactEditRemarkRequestValidationError{}

// Validate checks the field values on ContactEditRemarkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactEditRemarkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactEditRemarkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactEditRemarkResponseMultiError, or nil if none found.
func (m *ContactEditRemarkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactEditRemarkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ContactEditRemarkResponseMultiError(errors)
	}

	return nil
}

// ContactEditRemarkResponseMultiError is an error wrapping multiple validation
// errors returned by ContactEditRemarkResponse.ValidateAll() if the
// designated constraints aren't met.
type ContactEditRemarkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactEditRemarkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactEditRemarkResponseMultiError) AllErrors() []error { return m }

// ContactEditRemarkResponseValidationError is the validation error returned by
// ContactEditRemarkResponse.Validate if the designated constraints aren't met.
type ContactEditRemarkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactEditRemarkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactEditRemarkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactEditRemarkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactEditRemarkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactEditRemarkResponseValidationError) ErrorName() string {
	return "ContactEditRemarkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactEditRemarkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactEditRemarkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactEditRemarkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactEditRemarkResponseValidationError{}

// Validate checks the field values on ContactDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactDetailRequestMultiError, or nil if none found.
func (m *ContactDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return ContactDetailRequestMultiError(errors)
	}

	return nil
}

// ContactDetailRequestMultiError is an error wrapping multiple validation
// errors returned by ContactDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type ContactDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactDetailRequestMultiError) AllErrors() []error { return m }

// ContactDetailRequestValidationError is the validation error returned by
// ContactDetailRequest.Validate if the designated constraints aren't met.
type ContactDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactDetailRequestValidationError) ErrorName() string {
	return "ContactDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactDetailRequestValidationError{}

// Validate checks the field values on ContactDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactDetailResponseMultiError, or nil if none found.
func (m *ContactDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Mobile

	// no validation rules for Nickname

	// no validation rules for Remark

	// no validation rules for Avatar

	// no validation rules for Gender

	// no validation rules for Motto

	// no validation rules for FriendApply

	// no validation rules for FriendStatus

	// no validation rules for GroupId

	// no validation rules for Email

	if len(errors) > 0 {
		return ContactDetailResponseMultiError(errors)
	}

	return nil
}

// ContactDetailResponseMultiError is an error wrapping multiple validation
// errors returned by ContactDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type ContactDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactDetailResponseMultiError) AllErrors() []error { return m }

// ContactDetailResponseValidationError is the validation error returned by
// ContactDetailResponse.Validate if the designated constraints aren't met.
type ContactDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactDetailResponseValidationError) ErrorName() string {
	return "ContactDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactDetailResponseValidationError{}

// Validate checks the field values on ContactSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactSearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactSearchRequestMultiError, or nil if none found.
func (m *ContactSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mobile

	if len(errors) > 0 {
		return ContactSearchRequestMultiError(errors)
	}

	return nil
}

// ContactSearchRequestMultiError is an error wrapping multiple validation
// errors returned by ContactSearchRequest.ValidateAll() if the designated
// constraints aren't met.
type ContactSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactSearchRequestMultiError) AllErrors() []error { return m }

// ContactSearchRequestValidationError is the validation error returned by
// ContactSearchRequest.Validate if the designated constraints aren't met.
type ContactSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactSearchRequestValidationError) ErrorName() string {
	return "ContactSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactSearchRequestValidationError{}

// Validate checks the field values on ContactSearchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactSearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactSearchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactSearchResponseMultiError, or nil if none found.
func (m *ContactSearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactSearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Mobile

	// no validation rules for Nickname

	// no validation rules for Avatar

	// no validation rules for Gender

	// no validation rules for Motto

	if len(errors) > 0 {
		return ContactSearchResponseMultiError(errors)
	}

	return nil
}

// ContactSearchResponseMultiError is an error wrapping multiple validation
// errors returned by ContactSearchResponse.ValidateAll() if the designated
// constraints aren't met.
type ContactSearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactSearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactSearchResponseMultiError) AllErrors() []error { return m }

// ContactSearchResponseValidationError is the validation error returned by
// ContactSearchResponse.Validate if the designated constraints aren't met.
type ContactSearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactSearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactSearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactSearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactSearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactSearchResponseValidationError) ErrorName() string {
	return "ContactSearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactSearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactSearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactSearchResponseValidationError{}

// Validate checks the field values on ContactChangeGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactChangeGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactChangeGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactChangeGroupRequestMultiError, or nil if none found.
func (m *ContactChangeGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactChangeGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for GroupId

	if len(errors) > 0 {
		return ContactChangeGroupRequestMultiError(errors)
	}

	return nil
}

// ContactChangeGroupRequestMultiError is an error wrapping multiple validation
// errors returned by ContactChangeGroupRequest.ValidateAll() if the
// designated constraints aren't met.
type ContactChangeGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactChangeGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactChangeGroupRequestMultiError) AllErrors() []error { return m }

// ContactChangeGroupRequestValidationError is the validation error returned by
// ContactChangeGroupRequest.Validate if the designated constraints aren't met.
type ContactChangeGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactChangeGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactChangeGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactChangeGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactChangeGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactChangeGroupRequestValidationError) ErrorName() string {
	return "ContactChangeGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContactChangeGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactChangeGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactChangeGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactChangeGroupRequestValidationError{}

// Validate checks the field values on ContactChangeGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactChangeGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactChangeGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactChangeGroupResponseMultiError, or nil if none found.
func (m *ContactChangeGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactChangeGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ContactChangeGroupResponseMultiError(errors)
	}

	return nil
}

// ContactChangeGroupResponseMultiError is an error wrapping multiple
// validation errors returned by ContactChangeGroupResponse.ValidateAll() if
// the designated constraints aren't met.
type ContactChangeGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactChangeGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactChangeGroupResponseMultiError) AllErrors() []error { return m }

// ContactChangeGroupResponseValidationError is the validation error returned
// by ContactChangeGroupResponse.Validate if the designated constraints aren't met.
type ContactChangeGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactChangeGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactChangeGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactChangeGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactChangeGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactChangeGroupResponseValidationError) ErrorName() string {
	return "ContactChangeGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContactChangeGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactChangeGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactChangeGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactChangeGroupResponseValidationError{}

// Validate checks the field values on ContactListResponse_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContactListResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactListResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactListResponse_ItemMultiError, or nil if none found.
func (m *ContactListResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactListResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Nickname

	// no validation rules for Gender

	// no validation rules for Motto

	// no validation rules for Avatar

	// no validation rules for Remark

	// no validation rules for IsOnline

	// no validation rules for GroupId

	if len(errors) > 0 {
		return ContactListResponse_ItemMultiError(errors)
	}

	return nil
}

// ContactListResponse_ItemMultiError is an error wrapping multiple validation
// errors returned by ContactListResponse_Item.ValidateAll() if the designated
// constraints aren't met.
type ContactListResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactListResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactListResponse_ItemMultiError) AllErrors() []error { return m }

// ContactListResponse_ItemValidationError is the validation error returned by
// ContactListResponse_Item.Validate if the designated constraints aren't met.
type ContactListResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactListResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactListResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactListResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactListResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactListResponse_ItemValidationError) ErrorName() string {
	return "ContactListResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e ContactListResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactListResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactListResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactListResponse_ItemValidationError{}
