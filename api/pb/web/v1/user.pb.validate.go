// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: web/v1/user.proto

package web

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserDetailRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDetailRequestMultiError, or nil if none found.
func (m *UserDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserDetailRequestMultiError(errors)
	}

	return nil
}

// UserDetailRequestMultiError is an error wrapping multiple validation errors
// returned by UserDetailRequest.ValidateAll() if the designated constraints
// aren't met.
type UserDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDetailRequestMultiError) AllErrors() []error { return m }

// UserDetailRequestValidationError is the validation error returned by
// UserDetailRequest.Validate if the designated constraints aren't met.
type UserDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDetailRequestValidationError) ErrorName() string {
	return "UserDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDetailRequestValidationError{}

// Validate checks the field values on UserDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDetailResponseMultiError, or nil if none found.
func (m *UserDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Mobile

	// no validation rules for Nickname

	// no validation rules for Avatar

	// no validation rules for Gender

	// no validation rules for Motto

	// no validation rules for Email

	// no validation rules for Birthday

	if len(errors) > 0 {
		return UserDetailResponseMultiError(errors)
	}

	return nil
}

// UserDetailResponseMultiError is an error wrapping multiple validation errors
// returned by UserDetailResponse.ValidateAll() if the designated constraints
// aren't met.
type UserDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDetailResponseMultiError) AllErrors() []error { return m }

// UserDetailResponseValidationError is the validation error returned by
// UserDetailResponse.Validate if the designated constraints aren't met.
type UserDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDetailResponseValidationError) ErrorName() string {
	return "UserDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDetailResponseValidationError{}

// Validate checks the field values on UserSettingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserSettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserSettingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserSettingRequestMultiError, or nil if none found.
func (m *UserSettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserSettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserSettingRequestMultiError(errors)
	}

	return nil
}

// UserSettingRequestMultiError is an error wrapping multiple validation errors
// returned by UserSettingRequest.ValidateAll() if the designated constraints
// aren't met.
type UserSettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserSettingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserSettingRequestMultiError) AllErrors() []error { return m }

// UserSettingRequestValidationError is the validation error returned by
// UserSettingRequest.Validate if the designated constraints aren't met.
type UserSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSettingRequestValidationError) ErrorName() string {
	return "UserSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSettingRequestValidationError{}

// Validate checks the field values on UserSettingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserSettingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserSettingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserSettingResponseMultiError, or nil if none found.
func (m *UserSettingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserSettingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserSettingResponseValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserSettingResponseValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserSettingResponseValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserSettingResponseValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserSettingResponseValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserSettingResponseValidationError{
				field:  "Setting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserSettingResponseMultiError(errors)
	}

	return nil
}

// UserSettingResponseMultiError is an error wrapping multiple validation
// errors returned by UserSettingResponse.ValidateAll() if the designated
// constraints aren't met.
type UserSettingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserSettingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserSettingResponseMultiError) AllErrors() []error { return m }

// UserSettingResponseValidationError is the validation error returned by
// UserSettingResponse.Validate if the designated constraints aren't met.
type UserSettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSettingResponseValidationError) ErrorName() string {
	return "UserSettingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserSettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSettingResponseValidationError{}

// Validate checks the field values on UserDetailUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserDetailUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDetailUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDetailUpdateRequestMultiError, or nil if none found.
func (m *UserDetailUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDetailUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Avatar

	// no validation rules for Nickname

	// no validation rules for Gender

	// no validation rules for Motto

	// no validation rules for Birthday

	if len(errors) > 0 {
		return UserDetailUpdateRequestMultiError(errors)
	}

	return nil
}

// UserDetailUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by UserDetailUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type UserDetailUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDetailUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDetailUpdateRequestMultiError) AllErrors() []error { return m }

// UserDetailUpdateRequestValidationError is the validation error returned by
// UserDetailUpdateRequest.Validate if the designated constraints aren't met.
type UserDetailUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDetailUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDetailUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDetailUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDetailUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDetailUpdateRequestValidationError) ErrorName() string {
	return "UserDetailUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserDetailUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDetailUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDetailUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDetailUpdateRequestValidationError{}

// Validate checks the field values on UserDetailUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserDetailUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDetailUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDetailUpdateResponseMultiError, or nil if none found.
func (m *UserDetailUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDetailUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserDetailUpdateResponseMultiError(errors)
	}

	return nil
}

// UserDetailUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by UserDetailUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type UserDetailUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDetailUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDetailUpdateResponseMultiError) AllErrors() []error { return m }

// UserDetailUpdateResponseValidationError is the validation error returned by
// UserDetailUpdateResponse.Validate if the designated constraints aren't met.
type UserDetailUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDetailUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDetailUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDetailUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDetailUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDetailUpdateResponseValidationError) ErrorName() string {
	return "UserDetailUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserDetailUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDetailUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDetailUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDetailUpdateResponseValidationError{}

// Validate checks the field values on UserPasswordUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserPasswordUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPasswordUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserPasswordUpdateRequestMultiError, or nil if none found.
func (m *UserPasswordUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPasswordUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OldPassword

	// no validation rules for NewPassword

	if len(errors) > 0 {
		return UserPasswordUpdateRequestMultiError(errors)
	}

	return nil
}

// UserPasswordUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by UserPasswordUpdateRequest.ValidateAll() if the
// designated constraints aren't met.
type UserPasswordUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPasswordUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPasswordUpdateRequestMultiError) AllErrors() []error { return m }

// UserPasswordUpdateRequestValidationError is the validation error returned by
// UserPasswordUpdateRequest.Validate if the designated constraints aren't met.
type UserPasswordUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPasswordUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPasswordUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPasswordUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPasswordUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPasswordUpdateRequestValidationError) ErrorName() string {
	return "UserPasswordUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserPasswordUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPasswordUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPasswordUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPasswordUpdateRequestValidationError{}

// Validate checks the field values on UserPasswordUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserPasswordUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPasswordUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserPasswordUpdateResponseMultiError, or nil if none found.
func (m *UserPasswordUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPasswordUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserPasswordUpdateResponseMultiError(errors)
	}

	return nil
}

// UserPasswordUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by UserPasswordUpdateResponse.ValidateAll() if
// the designated constraints aren't met.
type UserPasswordUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPasswordUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPasswordUpdateResponseMultiError) AllErrors() []error { return m }

// UserPasswordUpdateResponseValidationError is the validation error returned
// by UserPasswordUpdateResponse.Validate if the designated constraints aren't met.
type UserPasswordUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPasswordUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPasswordUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPasswordUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPasswordUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPasswordUpdateResponseValidationError) ErrorName() string {
	return "UserPasswordUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserPasswordUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPasswordUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPasswordUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPasswordUpdateResponseValidationError{}

// Validate checks the field values on UserMobileUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserMobileUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserMobileUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserMobileUpdateRequestMultiError, or nil if none found.
func (m *UserMobileUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserMobileUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mobile

	// no validation rules for Password

	// no validation rules for SmsCode

	if len(errors) > 0 {
		return UserMobileUpdateRequestMultiError(errors)
	}

	return nil
}

// UserMobileUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by UserMobileUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type UserMobileUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMobileUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMobileUpdateRequestMultiError) AllErrors() []error { return m }

// UserMobileUpdateRequestValidationError is the validation error returned by
// UserMobileUpdateRequest.Validate if the designated constraints aren't met.
type UserMobileUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserMobileUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserMobileUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserMobileUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserMobileUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserMobileUpdateRequestValidationError) ErrorName() string {
	return "UserMobileUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserMobileUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserMobileUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserMobileUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserMobileUpdateRequestValidationError{}

// Validate checks the field values on UserMobileUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserMobileUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserMobileUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserMobileUpdateResponseMultiError, or nil if none found.
func (m *UserMobileUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserMobileUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserMobileUpdateResponseMultiError(errors)
	}

	return nil
}

// UserMobileUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by UserMobileUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type UserMobileUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMobileUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMobileUpdateResponseMultiError) AllErrors() []error { return m }

// UserMobileUpdateResponseValidationError is the validation error returned by
// UserMobileUpdateResponse.Validate if the designated constraints aren't met.
type UserMobileUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserMobileUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserMobileUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserMobileUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserMobileUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserMobileUpdateResponseValidationError) ErrorName() string {
	return "UserMobileUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserMobileUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserMobileUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserMobileUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserMobileUpdateResponseValidationError{}

// Validate checks the field values on UserEmailUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserEmailUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserEmailUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserEmailUpdateRequestMultiError, or nil if none found.
func (m *UserEmailUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserEmailUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	// no validation rules for Code

	if len(errors) > 0 {
		return UserEmailUpdateRequestMultiError(errors)
	}

	return nil
}

// UserEmailUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by UserEmailUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type UserEmailUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserEmailUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserEmailUpdateRequestMultiError) AllErrors() []error { return m }

// UserEmailUpdateRequestValidationError is the validation error returned by
// UserEmailUpdateRequest.Validate if the designated constraints aren't met.
type UserEmailUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserEmailUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserEmailUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserEmailUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserEmailUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserEmailUpdateRequestValidationError) ErrorName() string {
	return "UserEmailUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserEmailUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserEmailUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserEmailUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserEmailUpdateRequestValidationError{}

// Validate checks the field values on UserEmailUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserEmailUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserEmailUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserEmailUpdateResponseMultiError, or nil if none found.
func (m *UserEmailUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserEmailUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserEmailUpdateResponseMultiError(errors)
	}

	return nil
}

// UserEmailUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by UserEmailUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type UserEmailUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserEmailUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserEmailUpdateResponseMultiError) AllErrors() []error { return m }

// UserEmailUpdateResponseValidationError is the validation error returned by
// UserEmailUpdateResponse.Validate if the designated constraints aren't met.
type UserEmailUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserEmailUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserEmailUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserEmailUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserEmailUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserEmailUpdateResponseValidationError) ErrorName() string {
	return "UserEmailUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserEmailUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserEmailUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserEmailUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserEmailUpdateResponseValidationError{}

// Validate checks the field values on UserSettingResponse_UserInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserSettingResponse_UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserSettingResponse_UserInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserSettingResponse_UserInfoMultiError, or nil if none found.
func (m *UserSettingResponse_UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserSettingResponse_UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Nickname

	// no validation rules for Avatar

	// no validation rules for Motto

	// no validation rules for Gender

	// no validation rules for IsQiye

	// no validation rules for Mobile

	// no validation rules for Email

	if len(errors) > 0 {
		return UserSettingResponse_UserInfoMultiError(errors)
	}

	return nil
}

// UserSettingResponse_UserInfoMultiError is an error wrapping multiple
// validation errors returned by UserSettingResponse_UserInfo.ValidateAll() if
// the designated constraints aren't met.
type UserSettingResponse_UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserSettingResponse_UserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserSettingResponse_UserInfoMultiError) AllErrors() []error { return m }

// UserSettingResponse_UserInfoValidationError is the validation error returned
// by UserSettingResponse_UserInfo.Validate if the designated constraints
// aren't met.
type UserSettingResponse_UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSettingResponse_UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSettingResponse_UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSettingResponse_UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSettingResponse_UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSettingResponse_UserInfoValidationError) ErrorName() string {
	return "UserSettingResponse_UserInfoValidationError"
}

// Error satisfies the builtin error interface
func (e UserSettingResponse_UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSettingResponse_UserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSettingResponse_UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSettingResponse_UserInfoValidationError{}

// Validate checks the field values on UserSettingResponse_ConfigInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserSettingResponse_ConfigInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserSettingResponse_ConfigInfo with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UserSettingResponse_ConfigInfoMultiError, or nil if none found.
func (m *UserSettingResponse_ConfigInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserSettingResponse_ConfigInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ThemeMode

	// no validation rules for ThemeBagImg

	// no validation rules for ThemeColor

	// no validation rules for NotifyCueTone

	// no validation rules for KeyboardEventNotify

	if len(errors) > 0 {
		return UserSettingResponse_ConfigInfoMultiError(errors)
	}

	return nil
}

// UserSettingResponse_ConfigInfoMultiError is an error wrapping multiple
// validation errors returned by UserSettingResponse_ConfigInfo.ValidateAll()
// if the designated constraints aren't met.
type UserSettingResponse_ConfigInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserSettingResponse_ConfigInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserSettingResponse_ConfigInfoMultiError) AllErrors() []error { return m }

// UserSettingResponse_ConfigInfoValidationError is the validation error
// returned by UserSettingResponse_ConfigInfo.Validate if the designated
// constraints aren't met.
type UserSettingResponse_ConfigInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSettingResponse_ConfigInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSettingResponse_ConfigInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSettingResponse_ConfigInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSettingResponse_ConfigInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSettingResponse_ConfigInfoValidationError) ErrorName() string {
	return "UserSettingResponse_ConfigInfoValidationError"
}

// Error satisfies the builtin error interface
func (e UserSettingResponse_ConfigInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSettingResponse_ConfigInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSettingResponse_ConfigInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSettingResponse_ConfigInfoValidationError{}
