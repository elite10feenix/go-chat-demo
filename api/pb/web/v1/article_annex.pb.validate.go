// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: web/v1/article_annex.proto

package web

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ArticleAnnexUploadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleAnnexUploadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleAnnexUploadRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleAnnexUploadRequestMultiError, or nil if none found.
func (m *ArticleAnnexUploadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleAnnexUploadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArticleId

	if len(errors) > 0 {
		return ArticleAnnexUploadRequestMultiError(errors)
	}

	return nil
}

// ArticleAnnexUploadRequestMultiError is an error wrapping multiple validation
// errors returned by ArticleAnnexUploadRequest.ValidateAll() if the
// designated constraints aren't met.
type ArticleAnnexUploadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleAnnexUploadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleAnnexUploadRequestMultiError) AllErrors() []error { return m }

// ArticleAnnexUploadRequestValidationError is the validation error returned by
// ArticleAnnexUploadRequest.Validate if the designated constraints aren't met.
type ArticleAnnexUploadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleAnnexUploadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleAnnexUploadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleAnnexUploadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleAnnexUploadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleAnnexUploadRequestValidationError) ErrorName() string {
	return "ArticleAnnexUploadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleAnnexUploadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleAnnexUploadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleAnnexUploadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleAnnexUploadRequestValidationError{}

// Validate checks the field values on ArticleAnnexUploadResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleAnnexUploadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleAnnexUploadResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleAnnexUploadResponseMultiError, or nil if none found.
func (m *ArticleAnnexUploadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleAnnexUploadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Size

	// no validation rules for Path

	// no validation rules for Suffix

	// no validation rules for OriginalName

	if len(errors) > 0 {
		return ArticleAnnexUploadResponseMultiError(errors)
	}

	return nil
}

// ArticleAnnexUploadResponseMultiError is an error wrapping multiple
// validation errors returned by ArticleAnnexUploadResponse.ValidateAll() if
// the designated constraints aren't met.
type ArticleAnnexUploadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleAnnexUploadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleAnnexUploadResponseMultiError) AllErrors() []error { return m }

// ArticleAnnexUploadResponseValidationError is the validation error returned
// by ArticleAnnexUploadResponse.Validate if the designated constraints aren't met.
type ArticleAnnexUploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleAnnexUploadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleAnnexUploadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleAnnexUploadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleAnnexUploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleAnnexUploadResponseValidationError) ErrorName() string {
	return "ArticleAnnexUploadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleAnnexUploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleAnnexUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleAnnexUploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleAnnexUploadResponseValidationError{}

// Validate checks the field values on ArticleAnnexDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleAnnexDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleAnnexDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleAnnexDeleteRequestMultiError, or nil if none found.
func (m *ArticleAnnexDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleAnnexDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AnnexId

	if len(errors) > 0 {
		return ArticleAnnexDeleteRequestMultiError(errors)
	}

	return nil
}

// ArticleAnnexDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by ArticleAnnexDeleteRequest.ValidateAll() if the
// designated constraints aren't met.
type ArticleAnnexDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleAnnexDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleAnnexDeleteRequestMultiError) AllErrors() []error { return m }

// ArticleAnnexDeleteRequestValidationError is the validation error returned by
// ArticleAnnexDeleteRequest.Validate if the designated constraints aren't met.
type ArticleAnnexDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleAnnexDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleAnnexDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleAnnexDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleAnnexDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleAnnexDeleteRequestValidationError) ErrorName() string {
	return "ArticleAnnexDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleAnnexDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleAnnexDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleAnnexDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleAnnexDeleteRequestValidationError{}

// Validate checks the field values on ArticleAnnexDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleAnnexDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleAnnexDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleAnnexDeleteResponseMultiError, or nil if none found.
func (m *ArticleAnnexDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleAnnexDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ArticleAnnexDeleteResponseMultiError(errors)
	}

	return nil
}

// ArticleAnnexDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by ArticleAnnexDeleteResponse.ValidateAll() if
// the designated constraints aren't met.
type ArticleAnnexDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleAnnexDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleAnnexDeleteResponseMultiError) AllErrors() []error { return m }

// ArticleAnnexDeleteResponseValidationError is the validation error returned
// by ArticleAnnexDeleteResponse.Validate if the designated constraints aren't met.
type ArticleAnnexDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleAnnexDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleAnnexDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleAnnexDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleAnnexDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleAnnexDeleteResponseValidationError) ErrorName() string {
	return "ArticleAnnexDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleAnnexDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleAnnexDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleAnnexDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleAnnexDeleteResponseValidationError{}

// Validate checks the field values on ArticleAnnexRecoverRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleAnnexRecoverRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleAnnexRecoverRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleAnnexRecoverRequestMultiError, or nil if none found.
func (m *ArticleAnnexRecoverRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleAnnexRecoverRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AnnexId

	if len(errors) > 0 {
		return ArticleAnnexRecoverRequestMultiError(errors)
	}

	return nil
}

// ArticleAnnexRecoverRequestMultiError is an error wrapping multiple
// validation errors returned by ArticleAnnexRecoverRequest.ValidateAll() if
// the designated constraints aren't met.
type ArticleAnnexRecoverRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleAnnexRecoverRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleAnnexRecoverRequestMultiError) AllErrors() []error { return m }

// ArticleAnnexRecoverRequestValidationError is the validation error returned
// by ArticleAnnexRecoverRequest.Validate if the designated constraints aren't met.
type ArticleAnnexRecoverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleAnnexRecoverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleAnnexRecoverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleAnnexRecoverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleAnnexRecoverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleAnnexRecoverRequestValidationError) ErrorName() string {
	return "ArticleAnnexRecoverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleAnnexRecoverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleAnnexRecoverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleAnnexRecoverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleAnnexRecoverRequestValidationError{}

// Validate checks the field values on ArticleAnnexRecoverResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleAnnexRecoverResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleAnnexRecoverResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleAnnexRecoverResponseMultiError, or nil if none found.
func (m *ArticleAnnexRecoverResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleAnnexRecoverResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ArticleAnnexRecoverResponseMultiError(errors)
	}

	return nil
}

// ArticleAnnexRecoverResponseMultiError is an error wrapping multiple
// validation errors returned by ArticleAnnexRecoverResponse.ValidateAll() if
// the designated constraints aren't met.
type ArticleAnnexRecoverResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleAnnexRecoverResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleAnnexRecoverResponseMultiError) AllErrors() []error { return m }

// ArticleAnnexRecoverResponseValidationError is the validation error returned
// by ArticleAnnexRecoverResponse.Validate if the designated constraints
// aren't met.
type ArticleAnnexRecoverResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleAnnexRecoverResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleAnnexRecoverResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleAnnexRecoverResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleAnnexRecoverResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleAnnexRecoverResponseValidationError) ErrorName() string {
	return "ArticleAnnexRecoverResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleAnnexRecoverResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleAnnexRecoverResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleAnnexRecoverResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleAnnexRecoverResponseValidationError{}

// Validate checks the field values on ArticleAnnexForeverDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ArticleAnnexForeverDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleAnnexForeverDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ArticleAnnexForeverDeleteRequestMultiError, or nil if none found.
func (m *ArticleAnnexForeverDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleAnnexForeverDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AnnexId

	if len(errors) > 0 {
		return ArticleAnnexForeverDeleteRequestMultiError(errors)
	}

	return nil
}

// ArticleAnnexForeverDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by
// ArticleAnnexForeverDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type ArticleAnnexForeverDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleAnnexForeverDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleAnnexForeverDeleteRequestMultiError) AllErrors() []error { return m }

// ArticleAnnexForeverDeleteRequestValidationError is the validation error
// returned by ArticleAnnexForeverDeleteRequest.Validate if the designated
// constraints aren't met.
type ArticleAnnexForeverDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleAnnexForeverDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleAnnexForeverDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleAnnexForeverDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleAnnexForeverDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleAnnexForeverDeleteRequestValidationError) ErrorName() string {
	return "ArticleAnnexForeverDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleAnnexForeverDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleAnnexForeverDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleAnnexForeverDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleAnnexForeverDeleteRequestValidationError{}

// Validate checks the field values on ArticleAnnexForeverDeleteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ArticleAnnexForeverDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleAnnexForeverDeleteResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ArticleAnnexForeverDeleteResponseMultiError, or nil if none found.
func (m *ArticleAnnexForeverDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleAnnexForeverDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ArticleAnnexForeverDeleteResponseMultiError(errors)
	}

	return nil
}

// ArticleAnnexForeverDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by
// ArticleAnnexForeverDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type ArticleAnnexForeverDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleAnnexForeverDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleAnnexForeverDeleteResponseMultiError) AllErrors() []error { return m }

// ArticleAnnexForeverDeleteResponseValidationError is the validation error
// returned by ArticleAnnexForeverDeleteResponse.Validate if the designated
// constraints aren't met.
type ArticleAnnexForeverDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleAnnexForeverDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleAnnexForeverDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleAnnexForeverDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleAnnexForeverDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleAnnexForeverDeleteResponseValidationError) ErrorName() string {
	return "ArticleAnnexForeverDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleAnnexForeverDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleAnnexForeverDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleAnnexForeverDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleAnnexForeverDeleteResponseValidationError{}

// Validate checks the field values on ArticleAnnexDownloadRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleAnnexDownloadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleAnnexDownloadRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleAnnexDownloadRequestMultiError, or nil if none found.
func (m *ArticleAnnexDownloadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleAnnexDownloadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AnnexId

	if len(errors) > 0 {
		return ArticleAnnexDownloadRequestMultiError(errors)
	}

	return nil
}

// ArticleAnnexDownloadRequestMultiError is an error wrapping multiple
// validation errors returned by ArticleAnnexDownloadRequest.ValidateAll() if
// the designated constraints aren't met.
type ArticleAnnexDownloadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleAnnexDownloadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleAnnexDownloadRequestMultiError) AllErrors() []error { return m }

// ArticleAnnexDownloadRequestValidationError is the validation error returned
// by ArticleAnnexDownloadRequest.Validate if the designated constraints
// aren't met.
type ArticleAnnexDownloadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleAnnexDownloadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleAnnexDownloadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleAnnexDownloadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleAnnexDownloadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleAnnexDownloadRequestValidationError) ErrorName() string {
	return "ArticleAnnexDownloadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleAnnexDownloadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleAnnexDownloadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleAnnexDownloadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleAnnexDownloadRequestValidationError{}

// Validate checks the field values on ArticleAnnexDownloadResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleAnnexDownloadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleAnnexDownloadResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleAnnexDownloadResponseMultiError, or nil if none found.
func (m *ArticleAnnexDownloadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleAnnexDownloadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ArticleAnnexDownloadResponseMultiError(errors)
	}

	return nil
}

// ArticleAnnexDownloadResponseMultiError is an error wrapping multiple
// validation errors returned by ArticleAnnexDownloadResponse.ValidateAll() if
// the designated constraints aren't met.
type ArticleAnnexDownloadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleAnnexDownloadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleAnnexDownloadResponseMultiError) AllErrors() []error { return m }

// ArticleAnnexDownloadResponseValidationError is the validation error returned
// by ArticleAnnexDownloadResponse.Validate if the designated constraints
// aren't met.
type ArticleAnnexDownloadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleAnnexDownloadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleAnnexDownloadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleAnnexDownloadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleAnnexDownloadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleAnnexDownloadResponseValidationError) ErrorName() string {
	return "ArticleAnnexDownloadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleAnnexDownloadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleAnnexDownloadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleAnnexDownloadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleAnnexDownloadResponseValidationError{}

// Validate checks the field values on ArticleAnnexRecoverListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleAnnexRecoverListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleAnnexRecoverListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ArticleAnnexRecoverListRequestMultiError, or nil if none found.
func (m *ArticleAnnexRecoverListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleAnnexRecoverListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ArticleAnnexRecoverListRequestMultiError(errors)
	}

	return nil
}

// ArticleAnnexRecoverListRequestMultiError is an error wrapping multiple
// validation errors returned by ArticleAnnexRecoverListRequest.ValidateAll()
// if the designated constraints aren't met.
type ArticleAnnexRecoverListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleAnnexRecoverListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleAnnexRecoverListRequestMultiError) AllErrors() []error { return m }

// ArticleAnnexRecoverListRequestValidationError is the validation error
// returned by ArticleAnnexRecoverListRequest.Validate if the designated
// constraints aren't met.
type ArticleAnnexRecoverListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleAnnexRecoverListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleAnnexRecoverListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleAnnexRecoverListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleAnnexRecoverListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleAnnexRecoverListRequestValidationError) ErrorName() string {
	return "ArticleAnnexRecoverListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleAnnexRecoverListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleAnnexRecoverListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleAnnexRecoverListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleAnnexRecoverListRequestValidationError{}

// Validate checks the field values on ArticleAnnexRecoverListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleAnnexRecoverListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleAnnexRecoverListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ArticleAnnexRecoverListResponseMultiError, or nil if none found.
func (m *ArticleAnnexRecoverListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleAnnexRecoverListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ArticleAnnexRecoverListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ArticleAnnexRecoverListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArticleAnnexRecoverListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ArticleAnnexRecoverListResponseValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ArticleAnnexRecoverListResponseValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArticleAnnexRecoverListResponseValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ArticleAnnexRecoverListResponseMultiError(errors)
	}

	return nil
}

// ArticleAnnexRecoverListResponseMultiError is an error wrapping multiple
// validation errors returned by ArticleAnnexRecoverListResponse.ValidateAll()
// if the designated constraints aren't met.
type ArticleAnnexRecoverListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleAnnexRecoverListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleAnnexRecoverListResponseMultiError) AllErrors() []error { return m }

// ArticleAnnexRecoverListResponseValidationError is the validation error
// returned by ArticleAnnexRecoverListResponse.Validate if the designated
// constraints aren't met.
type ArticleAnnexRecoverListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleAnnexRecoverListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleAnnexRecoverListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleAnnexRecoverListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleAnnexRecoverListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleAnnexRecoverListResponseValidationError) ErrorName() string {
	return "ArticleAnnexRecoverListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleAnnexRecoverListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleAnnexRecoverListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleAnnexRecoverListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleAnnexRecoverListResponseValidationError{}

// Validate checks the field values on ArticleAnnexRecoverListResponse_Item
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ArticleAnnexRecoverListResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleAnnexRecoverListResponse_Item
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ArticleAnnexRecoverListResponse_ItemMultiError, or nil if none found.
func (m *ArticleAnnexRecoverListResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleAnnexRecoverListResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ArticleId

	// no validation rules for Title

	// no validation rules for OriginalName

	// no validation rules for Day

	if len(errors) > 0 {
		return ArticleAnnexRecoverListResponse_ItemMultiError(errors)
	}

	return nil
}

// ArticleAnnexRecoverListResponse_ItemMultiError is an error wrapping multiple
// validation errors returned by
// ArticleAnnexRecoverListResponse_Item.ValidateAll() if the designated
// constraints aren't met.
type ArticleAnnexRecoverListResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleAnnexRecoverListResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleAnnexRecoverListResponse_ItemMultiError) AllErrors() []error { return m }

// ArticleAnnexRecoverListResponse_ItemValidationError is the validation error
// returned by ArticleAnnexRecoverListResponse_Item.Validate if the designated
// constraints aren't met.
type ArticleAnnexRecoverListResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleAnnexRecoverListResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleAnnexRecoverListResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleAnnexRecoverListResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleAnnexRecoverListResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleAnnexRecoverListResponse_ItemValidationError) ErrorName() string {
	return "ArticleAnnexRecoverListResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleAnnexRecoverListResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleAnnexRecoverListResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleAnnexRecoverListResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleAnnexRecoverListResponse_ItemValidationError{}
